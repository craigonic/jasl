// ************************************************************************** //
// Scenario.java - This class is a member of the <B>ui.data</B> package, which       //
//                 contains the class definitions and implementations for     //
//                 objects used to store and manage the state of an instance  //
//                 of jASL.                                                   //
//                                                                            //
//                 NOTE: This program is based on Advanced Squad Leader,      //
//                       which was created by The Avalon Hill Game Company,   //
//                       and lives on at <A HREF="http://www.multimanpublishing.com/Products/tabid/58/CategoryID/4/Default.aspx">MultimanPublishing.com</A>.              //
//                                                                            //
// Written By: Craig R. Campbell  -  January 2016                             //
// ************************************************************************** //

package jasl.ui.data;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;

import org.json.JSONObject;

import jasl.utilities.Messages;

/**
 * This class is used to translate text data in the JSON format into the objects
 * and settings necessary to play a jASL scenario.
 *
 * @version 1.0
 * @author Copyright (C) 2016 Craig R. Campbell (craigonic@gmail.com)
 * @see <A HREF="../../../../source/jasl/ui/data/Scenario.html">Source code</A>
 */

public final class Scenario
{
	// The following items are set using values associated with (mostly?)
	// matching key names in the JSON input file.

	// The name of the scenario.

	private String _name = null;

	// The number of turns in the scenario.

	private int _turns = 0;

	// The starting side in the scenario.

	private Side.Sides _startingSide = Side.Sides.ALLIES;

	// The following strings are used as messages for any exceptions that
	// may be generated by bad data being passed one of the constructors.

	private static final String CLASS_NAME = Scenario.class.getSimpleName();

	private static final String nullPointerError =
		Messages.buildErrorMessage(CLASS_NAME,Messages.CONSTRUCTOR,
		                           Messages.NULL_PARAMETER_MSG);

	private static final String invalidArgumentError =
		Messages.buildErrorMessage(CLASS_NAME,Messages.CONSTRUCTOR,
		                           Messages.INVALID_PARAMETER_MSG);
	// Constructors

	/**
	 * Construct a new <CODE>Scenario</CODE>.
	 *
	 * This constructor processes the specified JSON input data, using it to
	 * generate the objects and settings that define a scenario. The input
	 * stream will be closed when all of the data has been read.
	 *
	 * @param inputStream the UTF-8 encoded JSON input data
	 *
	 * @throws NullPointerException in the case of a null InputStream
	 * argument.
	 * @throws IOException in the case where an error occurs while reading
	 * the input data stream.
	 */

	public Scenario(InputStream inputStream) throws IOException
	{
		if (null == inputStream)
		{
			throw new NullPointerException(nullPointerError);
		}

		try
		{
			processInputStream(inputStream);
		}

		catch (Exception exception)
		{
			throw exception;
		}
	}

	/**
	 * Construct a new <CODE>Scenario</CODE>.
	 *
	 * This constructor performs the same function as the one that accepts
	 * an InputStream argument, with the added functionality of retrieving
	 * the data from the specified file.
	 *
	 * @param filename the name of the file containing the UTF-8
	 * encoded JSON input data
	 *
	 * @throws NullPointerException in the case of a null filename argument.
	 * @throws FileNotFoundException in the case where the file does not
	 * exist or cannot be read.
	 * @throws IOException in the case where the file cannot be opened or an
	 * error occurs while processing the data within it.
	 */

	public Scenario(String filename) throws IOException
	{
		if (null == filename)
		{
			throw new NullPointerException(nullPointerError);
		}

		try
		{
			processInputStream(new FileInputStream(filename));
		}

		catch (Exception exception)
		{
			throw exception;
		}
	}

	// Public access methods

	/**
	 * Return a text representation of the attributes of a scenario.
	 *
	 * @return a multi-line <CODE>String</CODE> specifying an overview of the elements of
	 * the scenario.
	 */

	public String toText()
	{
		StringBuffer returnString = new StringBuffer();

		returnString.append("Name:\t");
		returnString.append(toString());
		returnString.append("\n");

		returnString.append("Turns:\t");
		returnString.append(turns());

		returnString.append("\tStarting side:\t");
		returnString.append(startingSide().toString());
		returnString.append("\n");

		// Return the completed string to calling program.

		return returnString.toString();
	}

	/**
	 * Return the name of a scenario.
	 *
	 * @return a <CODE>String</CODE> specifying the scenario name.
	 */

	public String toString()
	{
		return _name;
	}

	/**
	 * Return the number of turns in a scenario.
	 *
	 * @return an <CODE>int</CODE> specifying the number of turns in the scenario.
	 */

	public int turns()
	{
		return _turns;
	}

	/**
	 * Return the starting side in a scenario.
	 *
	 * @return a <CODE>Side.Sides</CODE> specifying the starting side in the scenario.
	 */

	public Side.Sides startingSide()
	{
		return _startingSide;
	}

	// Private helper methods

	/**
	 * Translate the input data stream into a text string, which is
	 * subsequently parsed.
	 *
	 * This method is called from the constructors and does just what its
	 * name implies. When the read operation is complete, the input stream
	 * is closed and the String is passed to the parseJsonData() method.
	 *
	 * @param inputStream the UTF-8 encoded JSON input data
	 *
	 * @throws IOException in the case where an error occurs while reading
	 * the input data stream.
	 */

	private void processInputStream(InputStream inputStream) throws IOException
	{
		StringBuilder stringBuilder = new StringBuilder(2048);

		try
		{
			BufferedReader bufferedReader =
				new BufferedReader(new InputStreamReader(inputStream,
				                                         "UTF-8"));
			String inputString;

			while (null != (inputString = bufferedReader.readLine()))
			{
				stringBuilder.append(inputString);
			}

			inputStream.close();
		}

		catch (Exception exception)
		{
			throw exception;
		}

//		System.out.println("Input data:\n" + stringBuilder.toString());

		parseJsonData(stringBuilder.toString());
//		parseJsonData(null);
	}

	/**
	 * Parse the specified JSON data and use it to generate the objects and
	 * settings that define the scenario.
	 *
	 * This method is called from processInputStream().
	 *
	 * @param jsonData the JSON data to be parsed
	 */

	private void parseJsonData(String jsonData)
	{
		// Define local constants.

		String METHOD_NAME = "parseJsonData";

		if (null == jsonData)
		{
			throw new NullPointerException(Messages.buildErrorMessage(CLASS_NAME,
			                                                          METHOD_NAME,
			                                                          Messages.NULL_PARAMETER_MSG));
		}

		try
		{
			// TODO: Validate JSON data using schema.

			JSONObject jsonObject = new JSONObject(jsonData);

			_name  = jsonObject.getString("name");
			_turns = jsonObject.getInt("turns");
			_startingSide =
				Side.Sides.values()[jsonObject.getInt("starting side")];
		}

		catch (Exception exception)
		{
//			throw exception;
			System.out.println("Caught: " + exception);
		}
	}
}
