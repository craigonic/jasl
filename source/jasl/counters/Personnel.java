// ************************************************************************** //
// Personnel.java - This class is a member of the Counters package, which     //
//                  contains the class definitions and implementations for    //
//                  objects used to represent the virtual playing pieces in   //
//                  jASL.                                                     //
//                                                                            //
//                  NOTE: This program is based on Advanced Squad Leader, a   //
//                        product of The Avalon Hill Game Company.            //
//                                                                            //
// Written By     : Craig R. Campbell  -  December 1998                       //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Personnel.java,v 1.5 2001/12/09 06:49:27 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Personnel class - This class is used to define the characteristics of all  //
//                   infantry "units" other than leaders, those that          //
//                   represent more than one combat soldier. The exception to //
//                   this definition is the Hero class. Instances of this     //
//                   class may not be instantiated directly. It is strictly a //
//                   parent class.                                            //
// ************************************************************************** //

class Personnel extends Infantry
{
	// Private symbolic constants

	// These constants are used in the constructor to pass the correct value
	// of a Personnel unit (multi-man counter) for each attribute. Other types
	// of Units may allow the calling program to set these values but they are
	// the same for all MMCs.

	private static final int PORTAGE_CAPACITY   = 3;
	private static final int PORTAGE_VALUE      = 10;

	// This constant is used as part of the error messages (see below) that
	// that are generated when an exception is thrown.

	private static final String CLASS_NAME = "Personnel";

	// Private data members

	// The purpose of the classification variable is to describe the experience
	// level of the object that it represents. It applies only to multi-man
	// units (squads, crews, etc).

	private String classification;

	// The following strings are used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String nullPointerError =
		buildErrorMessage(CLASS_NAME,CONSTRUCTOR,NULL_PARAMETER_MSG);

	private static final String zeroLengthArgumentError =
		buildErrorMessage(CLASS_NAME,CONSTRUCTOR,ZERO_LENGTH_PARAMETER_MSG);

	private static final String invalidArgumentError =
		buildErrorMessage(CLASS_NAME,CONSTRUCTOR,INVALID_PARAMETER_MSG);

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Personnel. The parameters are passed up the chain from the object being
	// created.

	protected Personnel(String description,String nationality,String identity,
	                    String unitType,String firepower,int normalRange,
	                    int movement,int morale,int brokenMorale,
	                    boolean canSelfRally,int basicPointValue,
	                    int experienceLevelRating,boolean hasMaxELR,
	                    String classification)
	{
		// Pass the first 13 parameters to the superclass constructor. Note
		// that one or more variables has been set with symbolic constants.
		// These are defined at the beginning of this class and its
		// superclasses. If any exceptions are thrown, assume that they will be
		// caught and handled by the program creating the object.

		super(description,nationality,identity,unitType,firepower,normalRange,
		      PORTAGE_VALUE,movement,PORTAGE_CAPACITY,morale,brokenMorale,
		      canSelfRally,basicPointValue,experienceLevelRating,hasMaxELR);

		// Check the value of the remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		if (classification == null)
		{
			throw new NullPointerException(nullPointerError);
		}

		if (classification.length() == 0)
		{
			throw new IllegalArgumentException(zeroLengthArgumentError);
		}

		// Check the classification parameter against the valid entries list and
		// set the local copy if it is valid.

		if (CLASSIFICATIONS_VECTOR.contains(classification))
		{
			this.classification = classification;
		}

		// Throw an exception if a match was not found.

		else
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   classification);
		}
	}

	// Public access methods

	// toString - A method to display the value of the private data members of
	//            the current instance. The intent of this method is to provide
	//            text-based verification output for development and debugging.
	//            Each subclass includes a method with the same name and
	//            purpose.

	public String toString()
	{
		// Define local constants.

		String METHOD_LABEL = CLASS_NAME + TO_STRING_LABEL;

		// Create a buffer to store the string to be returned, initializing it
		// with the string defined in the parent class version of this method.

		StringBuffer returnString = new StringBuffer(super.toString());

		// Add the information describing the data stored in this class
		// instance.

		try
		{
			returnString.append(formatTextString(CLASSIFICATION_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getClassification(),
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Return the completed string to calling program.

		return (returnString.toString());
	}

	// getClassification - A method to return the value of the classification
	//                     member variable to the calling program.

	public String getClassification()
	{
		return (classification);
	}
}
