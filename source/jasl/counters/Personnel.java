// ************************************************************************** //
// Personnel.java - This class is a member of the Counters package, which     //
//                  contains the class definitions and implementations for    //
//                  objects used to represent the virtual playing pieces in   //
//                  jASL.                                                     //
//                                                                            //
//                  NOTE: This program is based on Advanced Squad Leader, a   //
//                        product of The Avalon Hill Game Company.            //
//                                                                            //
// Written By     : Craig R. Campbell  -  December 1998                       //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Personnel.java,v 1.3 2000/08/05 07:02:09 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Personnel class - This class is used to define the characteristics of all  //
//                   infantry "units" other than leaders, those that          //
//                   represent more than one combat soldier. The exception to //
//                   this definition is the Hero class. Instances of this     //
//                   class may not be instantiated directly. It is strictly a //
//                   parent class.                                            //
// ************************************************************************** //

class Personnel extends Infantry
{
	// Private symbolic constants

	// These constants are used in the constructor to pass the correct value
	// of a Personnel unit (multi-man counter) for each attribute. Other types
	// of Units may allow the calling program to set these values but they are
	// the same for all MMCs.

	private static final int PORTAGE_CAPACITY   = 3;
	private static final int PORTAGE_VALUE      = 10;

	// Private data members

	// The purpose of the classification variable is to describe the experience
	// level of the object that it represents. It applies only to multi-man
	// units (squads, crews, etc).

	private String classification;

	// The following strings are used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String nullPointerError = 
	    "Error: Personnel(constructor) - Null parameter received.";
		
	private static final String badArgumentError = 
	    "Error: Personnel(constructor) - Invalid parameter received (zero length).";

	private static final String invalidArgumentError = 
	    "Error: Personnel(constructor) - Invalid parameter received : ";

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Personnel. The parameters are passed up the chain from the object being
	// created.

	protected Personnel(String description,String nationality,String identity,
	                   String unitType,int firepower,int normalRange,
	                   int movement,int morale,int brokenMorale,
	                   boolean canSelfRally,int basicPointValue,
	                   int experienceLevelRating,boolean hasMaxELR,
	                   String classification)
		throws NullPointerException, IllegalArgumentException
	{
		// Pass the first 13 parameters to the superclass constructor. Note
		// that one or more variables has been set with symbolic constants.
		// These are defined at the beginning of this class and its
		// superclasses. If any exceptions are thrown, assume that they will be
		// caught and handled by the program creating the object.

		super(description,nationality,identity,unitType,firepower,normalRange,
		      movement,PORTAGE_CAPACITY,PORTAGE_VALUE,morale,brokenMorale,
		      canSelfRally,basicPointValue,experienceLevelRating,hasMaxELR);

		// Check the value of the remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		// Classification

		if (classification == null)
		{
			throw new NullPointerException(nullPointerError);
		}

		if (classification.length() == 0)
		{
			throw new IllegalArgumentException(badArgumentError);
		}

		// The foundMatch variable is used to indicate if an entry matching the
		// classification parameter was found in the list of valid
		// classifications (CLASSIFICATIONS). foundMatch is a static variable
		// defined in the Unit class.

		foundMatch = false;

		// Check the classification parameter against the valid entries list.

		for (int i = 0; i < CLASSIFICATIONS_LIST_SIZE; i++)
		{
			if (classification.equals(CLASSIFICATIONS[i]))
			{
				foundMatch = true;
				break;
			}
		}

		// Throw an exception if a match was not found.

		if (! foundMatch)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   classification);
		}

		this.classification = classification;
	}

	// Protected access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging. This function is only accessible to instances of
	//              the subclasses of Personnel and each subclass includes a
	//              function with the same name and purpose.

	protected void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		System.out.println("Classification          : " + getClassification());
	}

	// Public access methods

	// getClassification - A function to return the value of the classification
	//                     member variable to the calling program.

	public String getClassification()
	{
		return (classification);
	}
}
