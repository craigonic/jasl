// ************************************************************************** //
// Personnel.java - This class is a member of the Counters package, which     //
//                  contains the class definitions and implementations for    //
//                  objects used to represent the virtual playing pieces in   //
//                  jASL.                                                     //
//                                                                            //
//                  NOTE: This program is based on Advanced Squad Leader, a   //
//                        product of The Avalon Hill Game Company.            //
//                                                                            //
// Written By     : Craig R. Campbell  -  December 1998                       //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Personnel.java,v 1.2 1999/07/10 06:42:09 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Personnel class - This class is used to define the characteristics of all  //
//                   infantry "units" other than leaders, those that          //
//                   represent more than one combat soldier. The exception to //
//                   this definition is the Hero class. Instances of this     //
//                   class may not be instantiated directly. It is strictly a //
//                   parent class.                                            //
// ************************************************************************** //

class Personnel extends Infantry
{
	// Private data members

	// This variable contains the firepower available to the derived object of
	// this class (ie. "4").

	private int firepower;

	// This variable contains the normal range of the derived object of this
	// class (ie. "6").

	private int normalRange;

	// This variable contains the maximum portage points that the derived object
	// of this class can carry without affecting the number of movement points
	// available to it.

	private int portageCapacity;

	// This variable contains the current number of portage points of equipment
	// that the derived object of this class is carrying.

	private int portageLevel;

	// The following string is used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String badArgumentError = 
	    "Error: Personnel(constructor) - Invalid parameter value received.";

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Personnel. The parameters are passed up the chain from the object being
	// created.

	protected Personnel(String description,String nationality,int movement,int
	                    morale,int brokenMorale,boolean canSelfRally,int
					    firepower,int normalRange,int portageCapacity)
	{
		// Pass the first 6 parameters to the superclass constructor.
		// If any exceptions are thrown, assume that they will be caught and
		// handled by the program creating the object.

		super(description,nationality,movement,morale,brokenMorale,
		      canSelfRally);

		// Verify that the remaining values received fall within their
		// designated ranges.
	
		if (firepower > 0)
		{
			this.firepower = firepower;
		}

		if (normalRange > 0)
		{
			this.normalRange = normalRange;
		}

		if ((portageCapacity >= 0) && (portageCapacity < 11))
		{
			this.portageCapacity = portageCapacity;
		}

		// Copy the values received to the local member variables.

		this.portageLevel = 0; // Assume that weapon possession will be 
		                       // determined after the object is instantiated.
	}

	// Protected access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging. This function is only accessible to instances of
	//              the subclasses of Personnel and each subclass includes a
	//              function with the same name and purpose.

	protected void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		System.out.println("Normal Range\t: " + normalRange + "\tFirepower\t: "
		                   + firepower);

		System.out.println("Portage Capacity: " + portageCapacity +
		                   "\tPortageLevel\t: " + portageLevel);
	}

	// Public access methods

	// getFirepower - A function to return the value of the firepower member
	//                variable to the calling program.

	public int getFirepower()
	{
		return (firepower);
	}

	// getNormalRange - A function to return the value of the normalRange member
	//                  variable to the calling program.

	public int getNormalRange()
	{
		return (normalRange);
	}
}
