// ************************************************************************** //
// Infantry.java - This class is a member of the <B>counters</B> package, which      //
//                 contains the class definitions and implementations for     //
//                 objects used to represent the virtual playing pieces in    //
//                 jASL.                                                      //
//                                                                            //
//                 NOTE: This program is based on Advanced Squad Leader,      //
//                       which was created by The Avalon Hill Game Company,   //
//                       and lives on at <A HREF="http://www.multimanpublishing.com/ASL/asl.php">MultimanPublishing.com</A>.              //
//                                                                            //
// Written By    : Craig R. Campbell  -  December 1998                        //
//                                                                            //
// $Id: Infantry.java,v 1.15 2009/05/10 04:00:59 craig Exp $
// ************************************************************************** //

package jasl.counters;

import jasl.utilities.Messages;

/**
 * This class is used to define the characteristics which are common to all
 * infantry units. This class is strictly a superclass and cannot be
 * instantiated directly.
 *
 * @version 1.15
 * @author Craig R. Campbell
 * @see <A HREF="../../../source/jasl/counters/Infantry.html">Source code</A>
 */

class Infantry extends Mobile
{
	// Public symbolic constants

	/**
	 * Provides a label for an <A HREF="Infantry.html">Infantry</A> unit's normal morale value : <B>Morale</B>
	 */

	public static final String MORALE_LABEL = "Morale";

	/**
	 * Provides a label for an <A HREF="Infantry.html">Infantry</A> unit's broken morale value :
	 * <B>Broken Morale</B>
	 */

	public static final String BROKEN_MORALE_LABEL = "Broken Morale";

	/**
	 * Provides a label indicating if an <A HREF="Infantry.html">Infantry</A> unit has self rally
	 * capability : <B>Can Self Rally ?</B>
	 */

	public static final String CAN_SELF_RALLY_LABEL = "Can Self Rally ?";

	/**
	 * Provides a label for a unit's basic point value : <B>Basic Point Value</B>
	 */

	public static final String BPV_LABEL = "Basic Point Value";

	/**
	 * Provides a label for an <A HREF="Infantry.html">Infantry</A> unit's experience level rating :
	 * <B>Experience Level Rating</B>
	 */

	public static final String ELR_LABEL = "Experience Level Rating";

	// Protected symbolic constants

	// Legal status values. Additional values will be added here as necessary.

	/** <A NAME="_BROKEN_"></A>
	 * Indicates that the unit's current status is <B>Broken</B>.
	 *
	 * @see #getStatus
	 */

	protected static final String BROKEN = "Broken";

	/** <A NAME="_DESPERATE_"></A>
	 * Indicates that the unit's current status is <B>Desperate</B>.
	 *
	 * @see #getStatus
	 */

	protected static final String DESPERATE = "Desperate";

	/**
	 * Minimum valid basic point value : <B>0</B>
	 */

	protected static final int MIN_BPV = 0;

	// Private symbolic constants

	/**
	 * Minimum valid morale (normal and broken) value : <B>0</B>
	 */

	private static final int MIN_MORALE = 0;

	/**
	 * Maximum valid morale (normal and broken) value : <B>10</B>
	 */

	private static final int MAX_MORALE = 10;

	/** <A NAME="_MIN_ELR_"></A>
	 * Minimum valid experience level rating value : <B>0</B>
	 */

	private static final int MIN_ELR = 0;

	/** <A NAME="_MAX_ELR_"></A>
	 * Maximum valid experience level rating value : <B>5</B>
	 */

	private static final int MAX_ELR = 5;

	// Private data members

	// This variable contains the normal morale value of the derived object of
	// this class.

	private int morale;

	// This variable contains the morale value of the derived object of this
	// class when it is "broken".

	private int brokenMorale;

	// This variable indicates whether or not it is possible for the derived
	// object of this class to "self rally". This attribute is not visible to
	// the calling program, but is applied during the execution of the restore()
	// method.

	private boolean selfRallyCapable;

	// This variable stores the basic point value of the unit that this object
	// represents. This is used in the calculation of Battlefield Integrity and
	// for design your own (DYO) scenarios.

	private int basicPointValue;

	// This variable stores the experience level rating of the unit this object
	// represents. This is used in unit substitution and replacement.

	private int experienceLevelRating;

	// The following string is used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String invalidArgumentError =
		Messages.buildErrorMessage("Infantry",Messages.CONSTRUCTOR,
		                           Messages.INVALID_PARAMETER_MSG);

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Infantry. The parameters are passed up the chain from the object being
	// created.

	protected Infantry(Descriptions description,String nationality,
	                   String identity,String unitType,String firepower,
	                   int normalRange,int portageValue,
	                   boolean sprayFireCapable,int movement,
	                   int portageCapacity,int morale,int brokenMorale,
	                   boolean selfRallyCapable,int basicPointValue,
	                   int experienceLevelRating)
	{
		// Pass the first 10 parameters to the superclass constructor. If any
		// exceptions are thrown, assume that they will be caught and handled by
		// the program creating the object.

		super(description,nationality,identity,unitType,firepower,normalRange,
		      portageValue,sprayFireCapable,movement,portageCapacity);

		// Verify that the specified firepower parameter is a positive integer
		// value. If the parameter contains any letters (for example "20L")
		// Integer.parseInt() will throw a NumberFormatException. If this
		// exception is caught or the parameter is less than zero, throw an
		// exception. Otherwise assume that the value has been set correctly in
		// the superclass.

		try
		{
			if (Integer.parseInt(firepower) < MIN_FIREPOWER)
			{
				throw new IllegalArgumentException(invalidArgumentError +
				                                   firepower);
			}
		}

		catch (NumberFormatException exception)
		{
				throw new NumberFormatException(invalidArgumentError +
				                                firepower);
		}

		// Check the value of each remaining parameter and copy the value to the
		// local copy of the corresponding variable if an exception is not
		// found.

		// Morale

		if ((morale < MIN_MORALE) || (morale > MAX_MORALE))
		{
			throw new IllegalArgumentException(invalidArgumentError + morale);
		}

		this.morale = morale;

		// Broken Morale

		if ((brokenMorale < MIN_MORALE) || (brokenMorale > MAX_MORALE))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   brokenMorale);
		}

		this.brokenMorale = brokenMorale;

		// Self Rally Capability

		this.selfRallyCapable = selfRallyCapable;

		// Basic Point Value

		if (basicPointValue < MIN_BPV)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   basicPointValue);
		}

		this.basicPointValue = basicPointValue;

		// Experience Level Rating

		if ((experienceLevelRating < MIN_ELR) ||
		    (experienceLevelRating > MAX_ELR))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   experienceLevelRating);
		}

		else
		{
			this.experienceLevelRating = experienceLevelRating;
		}
	}

	// Public access methods

	/**
	 * Display the value of each of the private data members that describe the
	 * current instance. All of the members, beginning with the top-level class
	 * (<B><A HREF="Unit.html">Unit</A></B>) and continuing down the hierarchy to this level, are appended to
	 * the returned string. Each value is preceded by a label defined in this
	 * class or the interface associated with the item. There are no more than
	 * two values, including labels, in each line of output.
	 *
	 * @return a multi-line tabular <CODE>String</CODE>, 80 characters wide.
	 */

	public String toString()
	{
		// Create a buffer to store the string to be returned, initializing it
		// with the string defined in the parent class version of this method.

		StringBuffer returnString = new StringBuffer(super.toString());

		// Add the information describing the data stored in this class
		// instance.

		// Morale

		returnString.append(Messages.formatTextString(MORALE_LABEL,
		                                              FIRST_COLUMN_LABEL_WIDTH,
		                                              true,false));

		returnString.append(Messages.formatTextString(getMorale(),
		                                              SECOND_COLUMN_VALUE_WIDTH,
		                                              false,false));

		// Broken Morale

		returnString.append(Messages.formatTextString(BROKEN_MORALE_LABEL,
		                                              THIRD_COLUMN_LABEL_WIDTH,
		                                              true,false));

		returnString.append(Messages.formatTextString(getBrokenMorale(),
		                                              FOURTH_COLUMN_VALUE_WIDTH,
		                                              false,true));

		// Self Rally Capability

		returnString.append(Messages.formatTextString(CAN_SELF_RALLY_LABEL,
		                                              FIRST_COLUMN_LABEL_WIDTH,
		                                              true,false));

		returnString.append(Messages.formatTextString(Messages.getChoiceLabel(canSelfRally()),
		                                              SECOND_COLUMN_VALUE_WIDTH,
		                                              false,true));

		// Basic Point Value

		returnString.append(Messages.formatTextString(BPV_LABEL,
		                                              FIRST_COLUMN_LABEL_WIDTH,
		                                              true,false));

		returnString.append(Messages.formatTextString(getBPV(),
		                                              SECOND_COLUMN_VALUE_WIDTH,
		                                              false,false));

		// Experience Level Rating

		returnString.append(Messages.formatTextString(ELR_LABEL,
		                                              THIRD_COLUMN_LABEL_WIDTH,
		                                              true,false));

		returnString.append(Messages.formatTextString(getELR(),
		                                              FOURTH_COLUMN_VALUE_WIDTH,
		                                              false,true));

		// Return the completed string to calling program.

		return returnString.toString();
	}

	/**
	 * Return the current status of this unit.
	 *
	 * @return a comma delimited <CODE>String</CODE> describing the unit status. The list
	 * will include one or more of the string constants that are associated with
	 * unit status.
	 *
	 * @see Infantry#BROKEN
	 * @see Infantry#DESPERATE
	 * @see Unit#NORMAL
	 */

	public String getStatus()
	{
		return NORMAL;
	}

	/**
	 * Return the morale level of this unit when it is in its normal state.
	 *
	 * @return a <CODE>String</CODE> specifying the normal morale level.
	 */

	public String getMorale()
	{
		return Integer.toString(morale);
	}

	/**
	 * Return the morale level of this unit when it is broken.
	 *
	 * @return a <CODE>String</CODE> specifying the broken morale level.
	 */

	public String getBrokenMorale()
	{
		return Integer.toString(brokenMorale);
	}

	/**
	 * Return if this unit has the ability to rally without the presence of a
	 * <B><A HREF="Leader.html">Leader</A></B>. This is indicated on the back of the physical counter by a
	 * square around the broken morale value.
	 *
	 * @return a <CODE>boolean</CODE> indicating if a unit has this attribute.
	 */

	public boolean canSelfRally()
	{
		return selfRallyCapable;
	}

	/**
	 * Return the basic point value of this unit. This value is used to
	 * determine battlefield integrity and for design your own (DYO) scenarios.
	 *
	 * @return a <CODE>String</CODE> specifying the basic point value.
	 */

	public String getBPV()
	{
		return Integer.toString(basicPointValue);
	}

	/**
	 * Return the current experience level rating of this unit. This is a value
	 * between <A HREF="#_MIN_ELR_">MIN_ELR</A> and <A HREF="#_MAX_ELR_">MAX_ELR</A>, inclusive.
	 *
	 * @return a <CODE>String</CODE> specifying the experience level rating.
	 */

	public String getELR()
	{
		return Integer.toString(experienceLevelRating);
	}

	// Public game actions

	/**
	 * Attempt to restore the status of this unit from <A HREF="#_BROKEN_">Broken</A> and/or <A HREF="#_DESPERATE_">Desperate</A>
	 * to <A HREF="Unit.html#_NORMAL_">Normal</A>.
	 *
	 * @param isLeaderPresent indicates if a <B><A HREF="Leader.html">Leader</A></B> is present, which may
	 * determine if a restoration attempt can be made or not.
	 *
	 * @param modifier the applicable dice roll modifier for the attempt.
	 * This includes leadership DRM as well as other factors.
	 *
	 * @return a <CODE>boolean</CODE> indicating if the status of a unit is changed as a
	 * result of calling this method.
	 */

	public boolean restore(boolean isLeaderPresent,int modifier)
	{
		// Verify that the "unit" actually needs to be rallied.

		if ((getStatus().equals(BROKEN)) || (getStatus().equals(DESPERATE)))
		{
			// If the unit is capable of self-rallying (leaders and some elite
			// units) or a unbroken leader is present in the same space, make
			// the rally attempt.

			if (canSelfRally() || isLeaderPresent)
			{
				return true;
			}
		}

		// Unless determined otherwise above, the "unit" automatically fails.

		return false;
	}

	/**
	 * Perform a morale or task check on this unit.
	 *
	 * @param modifier the applicable dice roll modifier for the check.
	 * This includes leadership DRM as well as other factors.
	 *
	 * @return a <CODE>boolean</CODE> indicating if the status of a unit is changed as a
	 * result of calling this method.
	 */

	public boolean check(int modifier)
	{
		return false;
	}
}
