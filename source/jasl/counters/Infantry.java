// ************************************************************************** //
// Infantry.java - This class is a member of the Counters package, which      //
//                 contains the class definitions and implementations for     //
//                 objects used to represent the virtual playing pieces in    //
//                 jASL.                                                      //
//                                                                            //
//                 NOTE: This program is based on Advanced Squad Leader, a    //
//                       product of The Avalon Hill Game Company.             //
//                                                                            //
// Written By    : Craig R. Campbell  -  December 1998                        //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Infantry.java,v 1.2 1999/07/02 06:32:22 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Infantry class - This class, though derived from Unit, Fighting and        //
//                  Mobile, is the top-level class for describing the basic   //
//                  attributes of individual (leaders) and groups (squads) of //
//                  soldiers. Further detail for each type is provided by the //
//                  subclasses of Infantry. Instances of this class may not   //
//                  be instantiated directly. It is strictly a parent class.  //
// ************************************************************************** //

class Infantry extends Mobile
{
	// Private data members

	// This variable contains the normal morale value of the derived object of
	// this class.

	private int morale;

	// This variable contains the morale value of the derived object of this
	// class when it is "broken".

	private int brokenMorale;

	// This variable contains the current status of the derived object of this
	// class. The legal status values are defined as protected symbolic
	// constants below.

	private String status;

	// This variable indicates whether or not it is possible for the derived
	// object of this class to "self rally". This attribute is not visible to
	// the calling program, but is applied during the execution of the rally()
	// method.

	private boolean canSelfRally;

	// The following string is used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String badArgumentError = 
	    "Error: Infantry(constructor) - Invalid parameter value received.";

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Infantry. The parameters are passed up the chain from the object being
	// created.

	protected Infantry(String description,String nationality,int movement,
	                   int morale,int brokenMorale,boolean canSelfRally)
		throws NullPointerException, IllegalArgumentException
	{
		// Pass the first 3 parameters to the superclass constructor.
		// If any exceptions are thrown, assume that they will be caught and
		// handled by the program creating the object.

		super(description,nationality,movement);

		// Verify that the two morale values received fall within the
		// designated range.
	
		if ((morale < MIN_MORALE) || (morale > MAX_MORALE))
		{
			throw new IllegalArgumentException(badArgumentError);
		}
			
		if ((brokenMorale < MIN_MORALE) || (brokenMorale > MAX_MORALE))
		{
			throw new IllegalArgumentException(badArgumentError);
		}
			
		// Copy the values received to the local member variables.

		this.morale = morale;
		this.brokenMorale = brokenMorale;
		this.canSelfRally = canSelfRally;

		// Assume all units are unbroken when instantiated.

		this.status = NORMAL; 
	}

	// Protected symbolic constants

	// The following symbolic constants are used by this class and its 
	// sub-classes to define morale value limits and the legal values for the
	// status member variable.

	// Morale value limits. These apply to both standard and broken morale.

	protected static final int MIN_MORALE =  0;
	protected static final int MAX_MORALE = 10;
	
	// Legal status values. DEFAULT_STATUS, which is defined in Fighting.java,
	// is also a legal value. Its value is "Unknown". Additional values will be
	// added here as necessary.

	protected static final String BROKEN    = "Broken";
	protected static final String DESPERATE = "Desperate";
	protected static final String NORMAL    = "Normal";
	
	// Protected access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging. This function is only accessible to instances of
	//              the subclasses of Infantry and each subclass includes a
	//              function with the same name and purpose.

	protected void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		if (canSelfRally)
		{
			System.out.print("Can Self Rally ?: Yes");
		}

		else
		{
			System.out.print("Can Self Rally ?: No");
		}

		System.out.println("\tStatus\t: " + getStatus());

		System.out.println("Morale\t: " + morale + "\tBroken Morale\t: " +
		                   brokenMorale);
	}

	// Public access methods

	// getStatus - A function to return the value of the status member variable
	//             to the calling program.

	public String getStatus()
	{
		return(status);
	}

	// Public game actions

	// rally - A function to execute an attempt to rally (restore the status of
	//         the "unit" from Broken and/or Desperate to Normal). The two
	//         parameters are used to determine if the attempt can be made and
	//         any modifications that may affect the attempt. The function 
	//         returns a boolean value to indicate the success or failure of the
	//         attempt.

	// NOTE: DEFAULT_RESULT has a value of "false" and is defined in
	//       Fighting.java 

	public boolean rally(boolean isLeaderPresent,int modifier)
	{
		// Verify that the "unit" actually needs to be rallied.

		if ((status.equals(BROKEN)) || (status.equals(DESPERATE)))
		{
			// If the unit is capable of self-rallying (leaders and some elite
			// units) or a unbroken leader is present in the same space, make
			// the rally attempt.

			if ((canSelfRally) || (isLeaderPresent))
			{
				return(true);
			}

			// Otherwise, the "unit" automatically fails.

			else
			{
				return(false);
			}
		}

		return(DEFAULT_RESULT);
	}

	// moraleCheck - A function to execute a check on the morale of the "unit".
	//               The parameter is used to modify the attempt. The function
	//               returns a boolean value to indicate the success or failure
	//               of the check.

	public boolean moraleCheck(int modifier)
	{
		return(DEFAULT_RESULT);
	}
}
