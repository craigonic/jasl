// ************************************************************************** //
// Infantry.java - This class is a member of the Counters package, which      //
//                 contains the class definitions and implementations for     //
//                 objects used to represent the virtual playing pieces in    //
//                 jASL.                                                      //
//                                                                            //
//                 NOTE: This program is based on Advanced Squad Leader, a    //
//                       product of The Avalon Hill Game Company.             //
//                                                                            //
// Written By    : Craig R. Campbell  -  December 1998                        //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Infantry.java,v 1.6 2001/12/09 06:37:31 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Infantry class - This class, though derived from Unit, Fighting and        //
//                  Mobile, is the top-level class for describing the basic   //
//                  attributes of individual (leaders) and groups (squads) of //
//                  soldiers. Further detail for each type is provided by the //
//                  subclasses of Infantry. Instances of this class may not   //
//                  be instantiated directly. It is strictly a parent class.  //
// ************************************************************************** //

class Infantry extends Mobile
{
	// Public symbolic constants

	// The following symbolic constants are used by this class and its 
	// sub-classes to define morale value limits and the legal values for the
	// status member variable.

	// Morale value limits. These apply to both standard and broken morale.

	public static final int MIN_MORALE =  0;
	public static final int MAX_MORALE = 10;

	// BPV (Basic Point Value) lower limit.

	public static final int MIN_BPV    =  0;

	// ELR (Experience Level Rating) value limits.

	public static final int MIN_ELR    =  0;
	public static final int MAX_ELR    =  5;

	// Protected symbolic constants

	// Legal status values. DEFAULT_STRING_VALUE, which is defined in Unit.java,
	// is also a legal value. Its value is "Unknown". Additional values will be
	// added here as necessary.

	protected static final String BROKEN    = "Broken";
	protected static final String DESPERATE = "Desperate";
	protected static final String NORMAL    = "Normal";

	// Private symbolic constants

	// This constant is used as part of the error messages (see below) that
	// that are generated when an exception is thrown.

	private static final String CLASS_NAME = "Infantry";

	// Private data members

	// This variable contains the normal morale value of the derived object of
	// this class.

	private int morale;

	// This variable contains the morale value of the derived object of this
	// class when it is "broken".

	private int brokenMorale;

	// This variable indicates whether or not it is possible for the derived
	// object of this class to "self rally". This attribute is not visible to
	// the calling program, but is applied during the execution of the restore()
	// method.

	private boolean canSelfRally;

	// This variable stores the basic point value of the unit that this object
	// represents. This is used in the calculation of Battlefield Integrity and
	// other morale related effects.

	private int basicPointValue;

	// This variable stores the experience level rating of the unit this object
	// represents. This is used in unit substitution and replacement.

	private int experienceLevelRating;

	// This variable is used to indicate that the unit that this object
	// represents is automatically given the maximum ELR on initialization. The
	// flag also affects how the unit is replaced.

	private boolean hasMaxELR;

	// The following string is used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String invalidArgumentError =
		buildErrorMessage(CLASS_NAME,CONSTRUCTOR,INVALID_PARAMETER_MSG);

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Infantry. The parameters are passed up the chain from the object being
	// created.

	protected Infantry(String description,String nationality,String identity,
	                   String unitType,String firepower,int normalRange,
	                   int portageValue,int movement,int portageCapacity,
	                   int morale,int brokenMorale,boolean canSelfRally,
	                   int basicPointValue,int experienceLevelRating,
	                   boolean hasMaxELR)
	{
		// Pass the first 9 parameters to the superclass constructor.
		// If any exceptions are thrown, assume that they will be caught and
		// handled by the program creating the object.

		super(description,nationality,identity,unitType,firepower,normalRange,
		      portageValue,movement,portageCapacity);

		// Verify that the specified firepower parameter is a positive integer
		// value. If the parameter contains any letters (for example "20L")
		// Integer.parseInt() will throw a NumberFormatException. If this
		// exception is caught or the parameter is less than zero, throw an
		// exception. Otherwise assume that the value has been set correctly in
		// the superclass.

		try
		{
			if (Integer.parseInt(firepower) < MIN_FIREPOWER)
			{
				throw new IllegalArgumentException(invalidArgumentError +
				                                   firepower);
			}
		}

		catch (NumberFormatException exception)
		{
				throw new NumberFormatException(invalidArgumentError +
				                                   firepower);
		}

		// Check the value of each remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		// Morale
	
		if ((morale < MIN_MORALE) || (morale > MAX_MORALE))
		{
			throw new IllegalArgumentException(invalidArgumentError + morale);
		}
			
		this.morale = morale;

		// Broken Morale

		if ((brokenMorale < MIN_MORALE) || (brokenMorale > MAX_MORALE))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   brokenMorale);
		}
			
		this.brokenMorale = brokenMorale;

		// Self Rally Capability

		this.canSelfRally = canSelfRally;

		// Basic Point Value

		if (basicPointValue < MIN_BPV)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   basicPointValue);
		}
			
		this.basicPointValue = basicPointValue;

		// Maximum ELR flag

		this.hasMaxELR = hasMaxELR;

		// Experience Level Rating
	
		if (hasMaxELR)
		{
			this.experienceLevelRating = MAX_ELR;
		}

		else if ((experienceLevelRating < MIN_ELR) ||
		         (experienceLevelRating > MAX_ELR))
		{
			throw new IllegalArgumentException(invalidArgumentError +
		                                       experienceLevelRating);
		}

		else
		{
			this.experienceLevelRating = experienceLevelRating;
		}
	}

	// Public access methods

	// toString - A method to display the value of the private data members of
	//            the current instance. The intent of this method is to provide
	//            text-based verification output for development and debugging.
	//            Each subclass includes a method with the same name and
	//            purpose.

	public String toString()
	{
		// Define local constants.

		String METHOD_LABEL = CLASS_NAME + TO_STRING_LABEL;

		// Create a buffer to store the string to be returned, initializing it
		// with the string defined in the parent class version of this method.

		StringBuffer returnString = new StringBuffer(super.toString());

		// Add the information describing the data stored in this class
		// instance.

		// Self Rally Capability

		try
		{
			returnString.append(formatTextString(CAN_SELF_RALLY_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString((canSelfRally) ? YES : NO,
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Maximum ELR flag

		try
		{
			returnString.append(formatTextString(HAS_MAXIMUM_ELR_LABEL,
			                                     THIRD_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString((hasMaxELR) ? YES : NO,
			                                     FOURTH_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Morale

		try
		{
			returnString.append(formatTextString(MORALE_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getMorale(),
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Broken Morale

		try
		{
			returnString.append(formatTextString(BROKEN_MORALE_LABEL,
			                                     THIRD_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getBrokenMorale(),
			                                     FOURTH_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Experience Level Rating

		try
		{
			returnString.append(formatTextString(ELR_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getELR(),
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Basic Point Value

		try
		{
			returnString.append(formatTextString(BPV_LABEL,
			                                     THIRD_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getBPV(),
			                                     FOURTH_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Return the completed string to calling program.

		return (returnString.toString());
	}

	// getStatus - A method to return the value of the status member variable
	//             to the calling program. This method returns a string with
	//             entries that correspond to the bits set in the current value
	//             of status (see Fighting.java). The possible strings are
	//             defined above as symbolic constants.

	public String getStatus()
	{
		return (DEFAULT_STRING_VALUE);
	}

	// getMorale - A method to return the value of the morale member variable
	//             to the calling program.

	public String getMorale()
	{
		return (Integer.toString(morale));
	}

	// getBrokenMorale - A method to return the value of the brokenMorale member
	//                   variable to the calling program.

	public String getBrokenMorale()
	{
		return (Integer.toString(brokenMorale));
	}

	// getELR - A method to return the value of the experienceLevelRating member
	//          variable to the calling program.

	public String getELR()
	{
		return (Integer.toString(experienceLevelRating));
	}

	// getBPV - A method to return the value of the basicPointValue member
	//          variable to the calling program.

	public String getBPV()
	{
		return (Integer.toString(basicPointValue));
	}

	// Public game actions

	// restore - A method to execute an attempt to rally (restore the status of
	//           the "unit" from Broken and/or Desperate to Normal). The two
	//           parameters are used to determine if the attempt can be made and
	//           any modifications that may affect the attempt. The method 
	//           returns a boolean value to indicate if the status changed as a
	//           result of the attempt.

	// NOTE: DEFAULT_FLAG_VALUE has a value of "false" and is defined in
	//       Unit.java 

	public boolean restore(boolean isLeaderPresent,int modifier)
	{
		// Verify that the "unit" actually needs to be rallied.

		if ((getStatus().equals(BROKEN)) || (getStatus().equals(DESPERATE)))
		{
			// If the unit is capable of self-rallying (leaders and some elite
			// units) or a unbroken leader is present in the same space, make
			// the rally attempt.

			if ((canSelfRally) || (isLeaderPresent))
			{
				return (true);
			}
		}

		// Unless determined otherwise above, the "unit" automatically fails.

		return (DEFAULT_FLAG_VALUE);
	}

	// check - A method to execute a check on the morale of the "unit". The
	//         parameter is used to modify the attempt. The method returns a
	//         boolean value to indicate if the status changed as a result of
	//         the check.

	public boolean check(int modifier)
	{
		return (DEFAULT_FLAG_VALUE);
	}
}
