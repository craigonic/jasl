// ************************************************************************** //
// Leader.java - This class is a member of the Counters package, which        //
//               contains the class definitions and implementations for       //
//               objects used to represent the virtual playing pieces in      //
//               jASL.                                                        //
//                                                                            //
//               NOTE: This program is based on Advanced Squad Leader, a      //
//                     product of The Avalon Hill Game Company.               //
//                                                                            //
// Written By  : Craig R. Campbell  -  December 1998                          //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Leader.java,v 1.5 2001/12/08 07:36:13 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Leader class - This class is used to define the unique characteristics of  //
//                leader "units". Instances of this class may be instantiated //
//                directly.                                                   //
// ************************************************************************** //

public final class Leader extends Infantry
{
	// Private symbolic constants

	// These constants are used in the constructor to pass the correct value
	// of a Leader for each attribute. Other types of units may allow the 
	// calling program to set these values but they are the same for all
	// Leaders.

	private static final int MOVEMENT_ALLOWANCE = 6;
	private static final int PORTAGE_CAPACITY   = 1;
	private static final int PORTAGE_VALUE      = 0;

	// This constant is used as part of the error messages (see below) that
	// that are generated when an exception is thrown.

	private static final String CLASS_NAME = "Leader";

	// Private data members

	// This variable contains the modifier available to the derived object of
	// this class (ie. "-2"). This modifier allows the leader to affect the 
	// outcome of actions that affect other "units" that share the same "space".

	private int modifier;

	// The following string is used as a message for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String invalidArgumentError =
		buildErrorMessage(LEADER,CONSTRUCTOR,INVALID_PARAMETER_MSG);

	// Constructor

	// This constructor is used to instantiate a Leader object.

	public Leader(String nationality,String identity,String unitType,int morale,
	              int brokenMorale,boolean canSelfRally,
	              int experienceLevelRating,int modifier)
	{
		// Pass the first 7 parameters to the superclass constructor. Note
		// that several variables have been set with symbolic constants. These
		// are defined at the beginning of this class and its superclasses.
		// If any exceptions are thrown, assume that they will be caught and
		// handled by the program creating the object.

		super(LEADER,nationality,identity,unitType,
		      Integer.toString(MIN_FIREPOWER),MIN_RANGE,PORTAGE_VALUE,
		      MOVEMENT_ALLOWANCE,PORTAGE_CAPACITY,morale,brokenMorale,
		      canSelfRally,MIN_BPV,experienceLevelRating,DEFAULT_FLAG_VALUE);

		// Check the value of the remaining parameter and copy the value to
		// the local copy of the variable if an exception is not found.

		// Modifier

		if ((modifier < MIN_LEADERSHIP_MODIFIER) ||
		    (modifier > MAX_LEADERSHIP_MODIFIER))
		{
			throw new IllegalArgumentException(invalidArgumentError + modifier);
		}

		this.modifier = modifier;
	}

	// Public access methods

	// toString - A method to display the value of the private data members of
	//            the current instance. The intent of this method is to provide
	//            text-based verification output for development and debugging.

	public String toString()
	{
		// Define local constants.

		String METHOD_LABEL = CLASS_NAME + TO_STRING_LABEL;

		// Create a buffer to store the string to be returned, initializing it
		// with the string defined in the parent class version of this method.

		StringBuffer returnString = new StringBuffer(super.toString());

		// Add the information describing the data stored in this class
		// instance.

		try
		{
			returnString.append(formatTextString(MODIFIER_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getModifier(),
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Return the completed string to calling program.

		return (returnString.toString());
	}

	// getModifier - A method to return the value of the modifier member
	//               variable to the calling program.

	public String getModifier()
	{
		return (Integer.toString(modifier));
	}
}
