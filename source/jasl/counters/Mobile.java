// ************************************************************************** //
// Mobile.java - This class is a member of the Counters package, which        //
//               contains the class definitions and implementations for       //
//               objects used to represent the virtual playing pieces in      //
//               jASL.                                                        //
//                                                                            //
//               NOTE: This program is based on Advanced Squad Leader, a      //
//                     product of The Avalon Hill Game Company.               //
//                                                                            //
// Written By  : Craig R. Campbell  -  December 1998                          //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Mobile.java,v 1.2 1999/08/14 06:34:12 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Mobile class - This class is used to distinguish between fighting units    //
//                that have the ability to move on their own (ie. squads,     //
//                leaders, tanks, etc) and those that are carried or towed    //
//                (ie. machine guns, artillery pieces, etc). Instances of     //
//                this class may not be instantiated directly. It is strictly //
//                a parent class.                                             //
// ************************************************************************** //

class Mobile extends Fighting
{
	// Protected symbolic constants

	// These constants are used to verify that the values passed to the 
	// constructor that are related to portage are valid.

	protected static final int MIN_PORTAGE_CAPACITY = 0;
	protected static final int MIN_PORTAGE_LEVEL    = 0;
	protected static final int MIN_PORTAGE_VALUE    = 0;
	protected static final int MAX_PORTAGE_VALUE    = 99;

	// Private data members

	// This variable contains the movement allowance of the derived object of
	// this class (ie. "4").

	private int movement;

	// This variable contains the maximum portage points that the derived object
	// of this class can carry without affecting the number of movement points
	// available to it.

	private int portageCapacity;

	// This variable contains the current number of portage points of equipment
	// that the derived object of this class is carrying.

	private int portageLevel;

	// This variable contains the level of portage points of a derived object
	// of this class (how much it costs to carry a unit of this type). If this
	// value is set to MAX_PORTAGE_VALUE, it cannot be carried by another unit.

	private int portageValue;

	// The following string is used as a message for the exception that may be
	// generated by bad data being passed to the constructor.

	private static final String invalidArgumentError = 
	    "Error: Mobile(constructor) - Invalid parameter received : ";

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Mobile. The parameters are passed up the chain from the object being
	// created.

	protected Mobile(String description,String nationality,String identity,
	                 String unitType,int firepower,int normalRange,int movement,
	                 int portageCapacity,int portageValue)
		throws IllegalArgumentException
	{
		// Pass the first 6 parameters to the superclass constructor. If any
		// exceptions are thrown, assume that they will be caught and handled by
		// the program creating the object.

		super(description,nationality,identity,unitType,firepower,normalRange);

		// Check the value of each remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		// Movement

		if (movement < MIN_MOVEMENT)
		{
			throw new IllegalArgumentException(invalidArgumentError + movement);
		}

		this.movement = movement;

		// Portage Capacity

		if (portageCapacity < MIN_PORTAGE_CAPACITY)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   portageCapacity);
		}

		this.portageCapacity = portageCapacity;

		// Portage Value

		if ((portageValue < MIN_PORTAGE_VALUE) ||
		    (portageValue > MAX_PORTAGE_VALUE))  
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   portageValue);
		}

		this.portageValue = portageValue;

		// Portage Level

		this.portageLevel = 0; // Assume that this value will be determined
		                       // after the object is instantiated.
	}

	// Protected access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging. This function is only accessible to instances of
	//              the subclasses of Mobile and each subclass includes a
	//              function with the same name and purpose.

	protected void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		System.out.println("Movement\t: " + movement +
		                   "\tPortage Level\t: " + portageLevel);

		System.out.println("Portage Capacity: " + portageCapacity +
		                   "\tPortage Value\t: " + portageValue);
	}

	// Public access methods

	// getMovement - A function to return the value of the movement member
	//               variable to the calling program.

	public int getMovement()
	{
		return (movement);
	}
}
