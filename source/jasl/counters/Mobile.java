// ************************************************************************** //
// Mobile.java - This class is a member of the Counters package, which        //
//               contains the class definitions and implementations for       //
//               objects used to represent the virtual playing pieces in      //
//               jASL.                                                        //
//                                                                            //
//               NOTE: This program is based on Advanced Squad Leader, a      //
//                     product of The Avalon Hill Game Company.               //
//                                                                            //
// Written By  : Craig R. Campbell  -  December 1998                          //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Mobile.java,v 1.1 1999/06/23 05:01:31 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Mobile class - This class is used to distinguish between fighting units    //
//                that have the ability to move on their own (ie. squads,     //
//                leaders, tanks, etc) and those that are carried or towed    //
//                (ie. machine guns, artillery pieces, etc). Instances of     //
//                this class may not be instantiated directly. It is strictly //
//                a parent class.                                             //
// ************************************************************************** //

class Mobile extends Fighting
{
	// Private data members

	// This variable contains the movement allowance of the derived object of
	// this class (ie. "4").

	private int movement;

	// The following string is used as a message for the exception that may be
	// generated by bad data being passed to the constructor.

	// Constructor

	private static final String badArgumentError = 
	    "Error: Mobile(constructor) - Invalid parameter received (less than minimum).";

	// This constructor is used during the instantiation of classes derived from
	// Mobile. The parameters are passed up the chain from the object being
	// created.

	protected Mobile(String description,String nationality,int movement)
		throws IllegalArgumentException
	{
		// Pass first 2 parameters to the superclass constructor. If any
		// exceptions are thrown, assume that they will be caught and handled by
		// the program creating the object.

		super(description,nationality);

		// Check the value of the remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		if (movement < MIN_MOVEMENT)
		{
			throw new IllegalArgumentException(badArgumentError);
		}

		else
		{
			this.movement = movement;
		}
	}

	// Protected access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging. This function is only accessible to instances of
	//              the subclasses of Mobile and each subclass includes a
	//              function with the same name and purpose.

	protected void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		System.out.println("Movement\t: " + movement);
	}

	// Public access methods

	// getMovement - A function to return the value of the movement member
	//               variable to the calling program.

	public int getMovement()
	{
		return (movement);
	}
}
