// ************************************************************************** //
// Mobile.java - This class is a member of the Counters package, which        //
//               contains the class definitions and implementations for       //
//               objects used to represent the virtual playing pieces in      //
//               jASL.                                                        //
//                                                                            //
//               NOTE: This program is based on Advanced Squad Leader, a      //
//                     product of The Avalon Hill Game Company.               //
//                                                                            //
// Written By  : Craig R. Campbell  -  December 1998                          //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Mobile.java,v 1.5 2001/12/08 07:20:16 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Mobile class - This class is used to distinguish between fighting units    //
//                that have the ability to move on their own (ie. squads,     //
//                leaders, tanks, etc) and those that are carried or towed    //
//                (ie. machine guns, artillery pieces, etc). Instances of     //
//                this class may not be instantiated directly. It is strictly //
//                a parent class.                                             //
// ************************************************************************** //

class Mobile extends Fighting
{
	// Public symbolic constants

	// These constants are used to verify that the values passed to the 
	// constructor that are related to portage are valid.

	public static final int MIN_PORTAGE_CAPACITY = 0;
	public static final int MIN_PORTAGE_LEVEL    = 0;

	// Private symbolic constants

	// This constant is used as part of the error messages (see below) that
	// that are generated when an exception is thrown.

	private static final String CLASS_NAME = "Mobile";

	// Private data members

	// This variable contains the movement allowance of the derived object of
	// this class (ie. "4").

	private int movement;

	// This variable contains the maximum portage points that the derived object
	// of this class can carry without affecting the number of movement points
	// available to it.

	private int portageCapacity;

	// This variable contains the current number of portage points of equipment
	// that the derived object of this class is carrying.

	private int portageLevel;

	// The following string is used as a message for the exception that may be
	// generated by bad data being passed to the constructor.

	private static final String invalidArgumentError =
		buildErrorMessage(CLASS_NAME,CONSTRUCTOR,INVALID_PARAMETER_MSG);

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Mobile. The parameters are passed up the chain from the object being
	// created.

	protected Mobile(String description,String nationality,String identity,
	                 String unitType,String firepower,int normalRange,
	                 int portageValue,int movement,int portageCapacity)
	{
		// Pass the first 7 parameters to the superclass constructor. If any
		// exceptions are thrown, assume that they will be caught and handled by
		// the program creating the object.

		super(description,nationality,identity,unitType,firepower,normalRange,
		      portageValue);

		// Check the value of each remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		// Movement

		if (movement < MIN_MOVEMENT)
		{
			throw new IllegalArgumentException(invalidArgumentError + movement);
		}

		this.movement = movement;

		// Portage Capacity

		if (portageCapacity < MIN_PORTAGE_CAPACITY)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   portageCapacity);
		}

		this.portageCapacity = portageCapacity;

		// Portage Level

		this.portageLevel = MIN_PORTAGE_LEVEL; // Assume that this value will
		                                       // be determined after the object
		                                       // is instantiated.
	}

	// Public access methods

	// toString - A method to display the value of the private data members of
	//            the current instance. The intent of this method is to provide
	//            text-based verification output for development and debugging.
	//            Each subclass includes a method with the same name and
	//            purpose.

	public String toString()
	{
		// Define local constants.

		String METHOD_LABEL = CLASS_NAME + TO_STRING_LABEL;

		// Create a buffer to store the string to be returned, initializing it
		// with the string defined in the parent class version of this method.

		StringBuffer returnString = new StringBuffer(super.toString());

		// Add the information describing the data stored in this class
		// instance.

		// Movement

		try
		{
			returnString.append(formatTextString(MOVEMENT_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getMovement(),
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Portage Capacity

		try
		{
			returnString.append(formatTextString(PORTAGE_CAPACITY_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getPortageCapacity(),
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Portage Level

		try
		{
			returnString.append(formatTextString(PORTAGE_LEVEL_LABEL,
			                                     THIRD_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getPortageLevel(),
			                                     FOURTH_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Return the completed string to calling program.

		return (returnString.toString());
	}

	// getMovement - A method to return the value of the movement member
	//               variable to the calling program.

	public String getMovement()
	{
		return (Integer.toString(movement));
	}

	// getPortageCapacity - A method to return the value of the portageCapacity
	//                      member variable to the calling program.

	public String getPortageCapacity()
	{
		return (Integer.toString(portageCapacity));
	}

	// getPortageLevel - A method to return the value of the portageLevel member
	//                   variable to the calling program.

	public String getPortageLevel()
	{
		return (Integer.toString(portageLevel));
	}
}
