// ************************************************************************** //
// Squad.java - This class is a member of the <B>counters</B> package, which         //
//              contains the class definitions and implementations for        //
//              objects used to represent the virtual playing pieces in jASL. //
//                                                                            //
//              NOTE: This program is based on Advanced Squad Leader, which   //
//                    was created by The Avalon Hill Game Company, and lives  //
//                    on at <A HREF="http://www.multimanpublishing.com/ASL/asl.php">MultimanPublishing.com</A>.                           //
//                                                                            //
// Written By : Craig R. Campbell  -  December 1998                           //
//                                                                            //
// $Id: Squad.java,v 1.14 2008/11/25 08:10:06 craig Exp $
// ************************************************************************** //

package jasl.counters;

/**
 * This class is used to represent a Squad counter.
 *
 * @version 1.13
 * @author Craig R. Campbell
 * @see <A HREF="../../../source/jasl/counters/Squad.html">Source code</A>
 */

public final class Squad extends Personnel
{
	// Public symbolic constants

	/**
	 * Provides a label indicating if a <A HREF="Squad.html">Squad</A> has assault fire capability :
	 * <B>Can Assault Fire ?</B>
	 */

	public static final String CAN_ASSAULT_FIRE_LABEL = "Can Assault Fire ?";

	/**
	 * Provides a label for a <A HREF="Squad.html">Squad</A>'s smoke placement capability :
	 * <B>Smoke Placement Exponent</B>
	 */

	public static final String SMOKE_PLACEMENT_EXP_LABEL = "Smoke Placement Exponent";

	// Private symbolic constants

	/** Minimum valid smoke placement exponent value : <B>0</B> */

	private static final int MIN_SMOKE_EXPONENT = 0;

	/** Maximum valid smoke placement exponent value : <B>3</B> */

	private static final int MAX_SMOKE_EXPONENT = 3;

	// This constant is used as part of the error messages (see below) that are
	// generated when an exception is thrown.

	private static final String CLASS_NAME = "Squad";

	// Private data members

	// This flag variable indicates whether or not the Squad that this object
	// represents is capable of assault fire and movement. This is indicated on
	// the physical counter by an underscored firepower value.

	private boolean assaultFireCapable;

	// This variable is used to indicate if the Squad that this object
	// represents is capable of placing smoke grenades and the chance of
	// success.

	private int smokePlacementExponent;

	// The following string is used as a message for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String invalidArgumentError =
		buildErrorMessage(Descriptions.SQUAD.label(),CONSTRUCTOR,
		                  INVALID_PARAMETER_MSG);

	// Constructor

	/**
	 * Construct a new <CODE>Squad</CODE>.
	 *
	 * @param basicPointValue the point "value" of the Squad for the
	 * purpose of determining battlefield integrity and for design your own
	 * (DYO) scenarios. Example - <B>15</B>
	 * @param nationality the nationality of the Squad. Example - <B><A HREF="Nationality.html#_GERMAN_">GERMAN</A></B>
	 * @param identity an identifier for the Squad. Example - <B>"A1"</B>
	 * @param unitType a more specific nationality, type, or capability
	 * description for the Squad. Example - <B><A HREF="UnitType.html#_SS_">SS</A></B>
	 * @param firepower the inherent firepower of the Squad. Example - <B>"6"</B>
	 * @param normalRange the maximum range that the Squad's inherent
	 * firepower can be used at full strength. Example - <B>5</B>
	 * @param sprayFireCapable indicates if the Squad can engage targets in
	 * multiple locations in a single fire action. Example - <B>true</B>
	 * @param morale the morale level of the Squad in its unbroken state.
	 * Example - <B>8</B>
	 * @param brokenMorale the morale level of the Squad when it is broken.
	 * Example - <B>9</B>
	 * @param selfRallyCapable indicates if the Squad can rally without the
	 * presence of a <A HREF="Leader.html">Leader</A>. Example - <B>false</B>
	 * @param experienceLevelRating a value used for determining when a
	 * Squad should be replaced with a lower quality Squad or Half Squad(s).
	 * Example - <B>5</B>
	 * @param hasMaximumELR indicates if the Squad inherently has the
	 * maximum experience level rating. Example - <B>true</B>
	 * @param classification the quality of the Squad. Example - <B><A HREF="Classification.html#_FIRST_LINE_">FIRST_LINE</A></B>
	 * @param assaultFireCapable indicates if the Squad can use assault
	 * fire and movement. Example - <B>false</B>
	 * @param smokePlacementExponent a value used to indicate the inherent
	 * smoke generation ability of the Squad. Example - <B>2</B>
	 *
	 * @throws NullPointerException in the case of a null <CODE>String</CODE> parameter.
	 * @throws IllegalArgumentException in the case of a zero length <CODE>String</CODE>
	 * parameter or an invalid numeric value.
	 */

	public Squad(String nationality,String identity,String unitType,
	             String firepower,int normalRange,boolean sprayFireCapable,
	             int morale,int brokenMorale,boolean selfRallyCapable,
	             int basicPointValue,int experienceLevelRating,
	             boolean hasMaximumELR,String classification,
	             boolean assaultFireCapable,int smokePlacementExponent)
	{
		// Pass the first 13 parameters to the superclass constructor. Note that
		// one or more variables has been set with symbolic constants. These are
		// defined at the beginning of this class and its superclasses. If any
		// exceptions are thrown, assume that they will be caught and handled by
		// the program creating the object.

		super(Descriptions.SQUAD,nationality,identity,unitType,firepower,
		      normalRange,sprayFireCapable,morale,brokenMorale,selfRallyCapable,
		      basicPointValue,experienceLevelRating,hasMaximumELR,
		      classification);

		// Check the value of each remaining parameter and copy the value to the
		// local copy of the corresponding variable if an exception is not
		// found.

		// Assault Fire Capability

		this.assaultFireCapable = assaultFireCapable;

		// Smoke Placement Capability

		if ((smokePlacementExponent < MIN_SMOKE_EXPONENT) ||
		    (smokePlacementExponent > MAX_SMOKE_EXPONENT))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   smokePlacementExponent);
		}

		this.smokePlacementExponent = smokePlacementExponent;
	}

	// Public access methods

	/**
	 * Display the value of each of the private data members that describe the
	 * current instance. All of the members, beginning with the top-level class
	 * (<B><A HREF="Unit.html">Unit</A></B>) and continuing down the hierarchy to this level, are appended to
	 * the returned string. Each value is preceded by a label defined in the
	 * <B><A HREF="Counter.html">Counter</A></B> interface. There are no more than two values, including labels,
	 * in each line of output.
	 *
	 * @return a multi-line tabular <CODE>String</CODE>, 80 characters wide.
	 */

	public String toString()
	{
		// Define local constants.

		String METHOD_LABEL = CLASS_NAME + TO_STRING_LABEL;

		// Create a buffer to store the string to be returned, initializing it
		// with the string defined in the parent class version of this method.

		StringBuffer returnString = new StringBuffer(super.toString());

		// Add the information describing the data stored in this class
		// instance.

		// Assault Fire Capability

		try
		{
			returnString.append(formatTextString(CAN_ASSAULT_FIRE_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(canAssaultFire() ? YES : NO,
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Smoke Placement Capability

		try
		{
			returnString.append(formatTextString(SMOKE_PLACEMENT_EXP_LABEL,
			                                     THIRD_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getSPE(),
			                                     FOURTH_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Return the completed string to calling program.

		return (returnString.toString());
	}

	/**
	 * Determine if this Squad has assault fire and movement capabilities. This
	 * is indicated on the physical counter by an underscored firepower value.
	 *
	 * @return a <CODE>boolean</CODE> indicating if a Squad has this capability.
	 */

	public boolean canAssaultFire()
	{
		return (assaultFireCapable);
	}

	/**
	 * Determine the smoke placement capability of this Squad. This is indicated
	 * on the physical counter as a superscript on the firepower value.
	 *
	 * @return a <CODE>String</CODE> specifying the Smoke Placement Exponent value.
	 */

	public String getSPE()
	{
		return (Integer.toString(smokePlacementExponent));
	}
}
