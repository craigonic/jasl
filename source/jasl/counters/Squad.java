// ************************************************************************** //
// Squad.java - This class is a member of the Counters package, which         //
//              contains the class definitions and implementations for        //
//              objects used to represent the virtual playing pieces in jASL. //
//                                                                            //
//              NOTE: This program is based on Advanced Squad Leader, a       //
//                    product of The Avalon Hill Game Company.                //
//                                                                            //
// Written By : Craig R. Campbell  -  December 1998                           //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Squad.java,v 1.6 2001/12/09 06:53:08 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Squad class - This class is used to define the unique characteristics of   //
//               squad "units". Instances of this class may be instantiated   //
//               directly.                                                    //
// ************************************************************************** //

public final class Squad extends Personnel
{
	// Private symbolic constants

	// These constants are used to determine if the value of the 
	// smokePlacementExponent parameter passed to the constructor is valid.

	private static final int MIN_SMOKE_EXPONENT = 0;
	private static final int MAX_SMOKE_EXPONENT = 3;

	// This constant is used as part of the error messages (see below) that
	// that are generated when an exception is thrown.

	private static final String CLASS_NAME = "Squad";

	// Private data members

	// This flag variable indicates whether or not the Squad that this object
	// represents is capable of assault fire. This is indicated on the physical
	// counter by an underscored firepower value.

	private boolean canAssaultFire;

	// This flag variable indicates whether or not the Squad that this object
	// represents is capable of spraying fire. This is indicated on the physical
	// counter by an underscored range value.

	private boolean canSprayFire;

	// This variable is used to indicate if the Squad that this object
	// represents is capable of placing smoke grenades and the chance of
	// success.

	private int smokePlacementExponent;

	// The following string is used as a message for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String invalidArgumentError =
		buildErrorMessage(SQUAD,CONSTRUCTOR,INVALID_PARAMETER_MSG);

	// Constructor

	// This constructor is used to instantiate a Squad object.

	public Squad(String nationality,String identity,String unitType,
	             String firepower,int normalRange,int movement,int morale,
	             int brokenMorale,boolean canSelfRally,int basicPointValue,
	             int experienceLevelRating,boolean hasMaxELR,
	             String classification,boolean canAssaultFire,
	             boolean canSprayFire,int smokePlacementExponent)
	{
		// Pass the first 13 parameters to the superclass constructor. Note
		// that one or more variables has been set with symbolic constants.
		// These are defined at the beginning of this class and its
		// superclasses. If any exceptions are thrown, assume that they will be
		// caught and handled by the program creating the object.

		super(SQUAD,nationality,identity,unitType,firepower,normalRange,
		      movement,morale,brokenMorale,canSelfRally,basicPointValue,
		      experienceLevelRating,hasMaxELR,classification);

		// Check the value of each remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		// Assault Fire Capability

		this.canAssaultFire = canAssaultFire;

		// Spray Fire Capability

		this.canSprayFire = canSprayFire;

		// Smoke Placement Capability

		if ((smokePlacementExponent < MIN_SMOKE_EXPONENT) ||
		    (smokePlacementExponent > MAX_SMOKE_EXPONENT))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   smokePlacementExponent);
		}

		this.smokePlacementExponent = smokePlacementExponent;
	}

	// Public access methods

	// toString - A method to display the value of the private data members of
	//            the current instance. The intent of this method is to provide
	//            text-based verification output for development and debugging.

	public String toString()
	{
		// Define local constants.

		String METHOD_LABEL = CLASS_NAME + TO_STRING_LABEL;

		// Create a buffer to store the string to be returned, initializing it
		// with the string defined in the parent class version of this method.

		StringBuffer returnString = new StringBuffer(super.toString());

		// Add the information describing the data stored in this class
		// instance.

		// Assault Fire Capability

		try
		{
			returnString.append(formatTextString(CAN_ASSAULT_FIRE_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString((canAssaultFire) ? YES : NO,
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Spray Fire Capability

		try
		{
			returnString.append(formatTextString(CAN_SPRAY_FIRE_LABEL,
			                                     THIRD_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString((canSprayFire) ? YES : NO,
			                                     FOURTH_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Smoke Placement Capability

		try
		{
			returnString.append(formatTextString(SMOKE_PLACEMENT_EXP_LABEL,
			                                     FIRST_COLUMN_LABEL_WIDTH,
			                                     true,false));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		try
		{
			returnString.append(formatTextString(getSmokePlacementExponent(),
			                                     SECOND_COLUMN_VALUE_WIDTH,
			                                     false,true));
		}

		catch (NullPointerException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		catch (IllegalArgumentException exception)
		{
			System.err.println(METHOD_LABEL + exception);
		}

		// Return the completed string to calling program.

		return (returnString.toString());
	}

	// getSmokePlacementExponent - A method to return the value of the
	//                             smokePlacementExponent member variable to the
	//                             calling program.

	public String getSmokePlacementExponent()
	{
		return (Integer.toString(smokePlacementExponent));
	}
}
