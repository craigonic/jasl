// ************************************************************************** //
// Squad.java - This class is a member of the Counters package, which         //
//              contains the class definitions and implementations for        //
//              objects used to represent the virtual playing pieces in jASL. //
//                                                                            //
//              NOTE: This program is based on Advanced Squad Leader, a       //
//                    product of The Avalon Hill Game Company.                //
//                                                                            //
// Written By : Craig R. Campbell  -  December 1998                           //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Squad.java,v 1.2 1999/08/18 05:26:50 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Squad class - This class is used to define the unique characteristics of   //
//               squad "units". Instances of this class may be instantiated   //
//               directly.                                                    //
// ************************************************************************** //

public class Squad extends Infantry
{
	// Private symbolic constants

	// These constants are used to determine if the value of the classification
	// parameter passed to the constructor is valid.

	private static final String ELITE           = "Elite";
	private static final String FIRST_LINE      = "1st Line";
	private static final String SECOND_LINE     = "2nd Line";
	private static final String GREEN           = "Green";
	private static final String CONSCRIPT       = "Conscript";

	// These constants are used in the constructor to pass the correct value
	// of a Squad for each attribute. Other types of units may allow the 
	// calling program to set these values but they are the same for all
	// Squads.

	private static final int MOVEMENT_ALLOWANCE = 4;
	private static final int PORTAGE_CAPACITY   = 3;
	private static final int PORTAGE_VALUE      = 10;

	// Private data members

	// The purpose of the classification variable is to describe the experience
	// level of the object that it represents. It applies only to multi-man
	// units (squads, crews, etc).

	private String classification;

	// The following strings are used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String nullPointerError = 
	    "Error: Squad(constructor) - Null parameter received.";
		
	private static final String badArgumentError = 
	    "Error: Squad(constructor) - Invalid parameter received (zero length).";

	private static final String invalidArgumentError = 
	    "Error: Squad(constructor) - Invalid parameter received : ";

	// Constructor

	// This constructor is used to instantiate a Squad object.

	public Squad(String nationality,String identity,int firepower,
	             int normalRange,int morale,int brokenMorale,
	             boolean canSelfRally,int basicPointValue,String classification)
		throws NullPointerException, IllegalArgumentException
	{
		// Pass the first 8 parameters to the superclass constructor. Note
		// that several variables have been set with symbolic constants. These
		// are defined at the beginning of this class and its superclasses.
		// If any exceptions are thrown, assume that they will be caught and
		// handled by the program creating the object.

		super(SQUAD,nationality,identity,SQUAD,firepower,normalRange,
		      MOVEMENT_ALLOWANCE,PORTAGE_CAPACITY,PORTAGE_VALUE,morale,
		      brokenMorale,canSelfRally,basicPointValue);

		// Check the value of each remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		// Classification

		if (classification == null)
		{
			throw new NullPointerException(nullPointerError);
		}

		if (classification.length() == 0)
		{
			throw new IllegalArgumentException(badArgumentError);
		}

		if (!(classification.equals(ELITE) ||
			  classification.equals(FIRST_LINE) ||
		      classification.equals(SECOND_LINE) ||
		      classification.equals(GREEN) ||
		      classification.equals(CONSCRIPT)))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   classification);
		}

		this.classification = classification;
	}

	// Public access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging.

	public void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		System.out.println("Classification\t: " + getClassification());
	}

	// getClassification - A function to return the value of the classification
	//                     member variable to the calling program.

	public String getClassification()
	{
		return (classification);
	}
}
