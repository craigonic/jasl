// ************************************************************************** //
// Fighting.java - This class is a member of the Counters package, which      //
//                 contains the class definitions and implementations for     //
//                 objects used to represent the virtual playing pieces in    //
//                 jASL.                                                      //
//                                                                            //
//                 NOTE: This program is based on Advanced Squad Leader, a    //
//                       product of The Avalon Hill Game Company.             //
//                                                                            //
// Written By    : Craig R. Campbell  -  December 1998                        //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Fighting.java,v 1.2 1999/07/10 06:34:37 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Fighting class - This class is used to distinguish between units that have //
//                  dynamic characteristics (ie. movement, firing, etc). from //
//                  units that are used to modify a space on the "board"      //
//                  (ie. wire, foxholes, etc). Instances of this class may    //
//                  not be instantiated directly. It is strictly a parent     //
//                  class.                                                    //
// ************************************************************************** //

class Fighting extends Unit
{
	// Private data members

	// This variable contains the nationality of the derived object of this
	// class (ie. "American" or "GER").

	private String nationality;

	// The following strings are used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String nullPointerError = 
	    "Error: Fighting(constructor) - Null parameter received.";
		
	private static final String badArgumentError = 
	    "Error: Fighting(constructor) - Invalid parameter received (zero length).";

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Fighting. The parameters are passed up the chain from the object being
	// created.

	protected Fighting(String description,String nationality)
		throws NullPointerException, IllegalArgumentException
	{
		// Pass first parameter to the superclass constructor. If any exceptions
		// are thrown, assume that they will be caught and handled by the
		// program creating the object.

		super(description);

		// Check the value of the remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		if (nationality == null)
		{
			throw new NullPointerException(nullPointerError);
		}

		if (nationality.length() == 0)
		{
			throw new IllegalArgumentException(badArgumentError);
		}

		this.nationality = nationality;
	}

	// Protected access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging. This function is only accessible to instances of
	//              the subclasses of Fighting and each subclass includes a
	//              function with the same name and purpose.

	protected void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		System.out.println("Nationality\t: " + nationality);
	}

	// Public access methods

	// getNationality - A function to return the value of the nationality member
	//                  variable to the calling program.

	public String getNationality()
	{
		return (nationality);
	}

	// Protected symbolic constants

	// These constants are available to all subclasses and are used to define
	// the default return values / settings for the public methods defined in
	// this class (see comment below) or in its subclasses.

	protected static final int     DEFAULT_VALUE          = 0;
	protected static final boolean DEFAULT_RESULT         = false;

	protected static final String  DEFAULT_CLASSIFICATION = "Unknown";
	protected static final String  DEFAULT_NAME           = "Unknown";
	protected static final String  DEFAULT_STATUS         = "Unknown";

	// The following function definitions are necessary in order to allow "Unit"
	// objects to be instantiated that represent any of the public subclasses
	// of the Counters package. These methods are defined as abstract in 
	// Unit.java, making it necessary for subclasses to override them. These
	// method definitions are intended to return a default value to satisfy the
	// compiler and serve as place holders for the actual definitions in
	// subclasses of this one. See the indicated files for a detailed
	// description of each method. The symbolic constants specified are defined
	// above or in Unit.java.
	
	// Mobile.java

	public int getMovement()
	{
		return (MIN_MOVEMENT);
	}

	// Infantry.java

	public String getStatus()
	{
		return(DEFAULT_STATUS);
	}

	public boolean rally(boolean isLeaderPresent,int modifier)
	{
		return(DEFAULT_RESULT);
	}

	public boolean moraleCheck(int modifier)
	{
		return(DEFAULT_RESULT);
	}

	// Personnel.java

 	public int getFirepower()
	{
		return (MIN_FIREPOWER);
	}

 	public int getNormalRange()
	{
		return (MIN_RANGE);
	}

	// Squad.java

	public String getClassification()
	{
		return (DEFAULT_CLASSIFICATION);
	}
	
	// Leader.java

	public int getModifier()
	{
		return (DEFAULT_VALUE);
	}

	public String getName()
	{
		return (DEFAULT_NAME);
	}
}
