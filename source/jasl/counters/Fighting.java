// ************************************************************************** //
// Fighting.java - This class is a member of the Counters package, which      //
//                 contains the class definitions and implementations for     //
//                 objects used to represent the virtual playing pieces in    //
//                 jASL.                                                      //
//                                                                            //
//                 NOTE: This program is based on Advanced Squad Leader, a    //
//                       product of The Avalon Hill Game Company.             //
//                                                                            //
// Written By    : Craig R. Campbell  -  December 1998                        //
//                                                                            //
// $Header: /tmp/java/jasl.cvs/jasl/source/jasl/counters/Fighting.java,v 1.4 2000/08/05 06:36:02 craig Exp $
// ************************************************************************** //

package Counters;

// ************************************************************************** //
// Fighting class - This class is used to distinguish between units that have //
//                  dynamic characteristics (ie. movement, firing, etc). from //
//                  units that are used to modify a space on the "board"      //
//                  (ie. wire, foxholes, etc). Instances of this class may    //
//                  not be instantiated directly. It is strictly a parent     //
//                  class.                                                    //
// ************************************************************************** //

class Fighting extends Unit
{
	// Protected symbolic constants

	// These constants are used to define the minimum values for some of the
	// key attributes for all of the fighting units defined by the public
	// subclasses of Unit.

	protected static final int MIN_FIREPOWER = 0;
	protected static final int MIN_MOVEMENT  = 0;
	protected static final int MIN_RANGE     = 0;

	// These constants are available to all subclasses and are used to define
	// the default return values / settings for the public methods defined in
	// this class (see comment below) or in its subclasses.

	protected static final int     DEFAULT_VALUE          = 0;
	protected static final boolean DEFAULT_RESULT         = false;

	protected static final String  DEFAULT_CLASSIFICATION = "Unknown";
	protected static final String  DEFAULT_STATUS         = "Unknown";

	// Private data members

	// This variable contains the nationality of the derived object of this
	// class (ie. "American" or "GER").

	private String nationality;

	// This variable contains a simple identifier for the counter, typically
	// a single alphanumeric character. It is also used to store the full name
	// for Leaders and Heroes.

	private String identity;

	// This variable is used to store the specific type of the counter. It is
	// intended for vehicles (Pz VIb, T-34/76, etc.) and weapons (FlaK 30, ATR,
	// etc.) for more precise identification. Infantry units will typically 
	// have the same value as Unit.description but this could also be used for
	// special infantry designations such as SS, Gurkha, Paratroopers, etc.

	private String unitType;

	// This variable contains the infantry firepower value of the derived object
	// of this class (ie. "4").

	private int firepower;

	// This variable contains the normal range of the derived object of this
	// class (ie. "6").

	private int normalRange;

	// The following strings are used as messages for any exceptions that may be
	// generated by bad data being passed to the constructor.

	private static final String nullPointerError = 
	    "Error: Fighting(constructor) - Null parameter received.";
		
	private static final String badArgumentError = 
	    "Error: Fighting(constructor) - Invalid parameter received (zero length).";

	private static final String invalidArgumentError = 
	    "Error: Fighting(constructor) - Invalid parameter received : ";

	// Constructor

	// This constructor is used during the instantiation of classes derived from
	// Fighting. The parameters are passed up the chain from the object being
	// created.

	protected Fighting(String description,String nationality,String identity,
	                   String unitType,int firepower,int normalRange)
		throws NullPointerException, IllegalArgumentException
	{
		// Pass the first parameter to the superclass constructor. If any
		// exceptions are thrown, assume that they will be caught and handled by
		// the program creating the object.

		super(description);

		// Check the value of each remaining parameter and copy the value to
		// the local copy of the corresponding variable if an exception is not
		// found.

		// Nationality

		if (nationality == null)
		{
			throw new NullPointerException(nullPointerError);
		}

		if (nationality.length() == 0)
		{
			throw new IllegalArgumentException(badArgumentError);
		}

		// The foundMatch variable is used to indicate if an entry matching the
		// nationality parameter was found in the list of valid
		// nationalities (NATIONALITIES). foundMatch is a static variable
		// defined in the Unit class.

		foundMatch = false;

		// Check the nationality parameter against the valid entries list.

		for (int i = 0; i < NATIONALITIES_LIST_SIZE; i++)
		{
			if (nationality.equals(NATIONALITIES[i]))
			{
				foundMatch = true;
				break;
			}
		}

		// Throw an exception if a match was not found.

		if (! foundMatch)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   nationality);
		}

		this.nationality = nationality;

		// Identity

		if (identity == null)
		{
			throw new NullPointerException(nullPointerError);
		}

		if (identity.length() == 0)
		{
			throw new IllegalArgumentException(badArgumentError);
		}

		this.identity = identity;

		// Unit Type

		if (unitType == null)
		{
			throw new NullPointerException(nullPointerError);
		}

		if (unitType.length() == 0)
		{
			throw new IllegalArgumentException(badArgumentError);
		}

		if ((unitType.equals(PARATROOPS)) && (!(nationality.equals(AMERICAN))))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                  nationality + " and " + unitType);
		}

		if (((unitType.equals(AIRBORNE))    || (unitType.equals(ANZAC))       ||
		     (unitType.equals(CANADIAN))    || (unitType.equals(FREE_FRENCH)) ||
		     (unitType.equals(FREE_POLISH)) || (unitType.equals(GUARDSMEN))   ||
		     (unitType.equals(GURKHA)))     && (!(nationality.equals(BRITISH))))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                  nationality + " and " + unitType);
		}

		if ((unitType.equals(SISSI)) && (!(nationality.equals(FINNISH))))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                  nationality + " and " + unitType);
		}

		if (((unitType.equals(SS)) || (unitType.equals(ENGINEERS))) &&
		    (!(nationality.equals(GERMAN))))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                  nationality + " and " + unitType);
		}

		if (((unitType.equals(COMMISSAR)) || (unitType.equals(GUARDS))) &&
		    (!(nationality.equals(RUSSIAN))))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                  nationality + " and " + unitType);
		}

		if ((unitType.equals(COMMISSAR)) && (!(description.equals(LEADER))))
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                  description + " and " + unitType);
		}

		this.unitType = unitType;

		// Firepower

		if (firepower < MIN_FIREPOWER)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   firepower);
		}

		this.firepower = firepower;

		// Normal Range

		if (normalRange < MIN_RANGE)
		{
			throw new IllegalArgumentException(invalidArgumentError +
			                                   normalRange);
		}

		this.normalRange = normalRange;
	}

	// Protected access methods

	// showValues - A function to display the value of the private data members
	//              of the current instance. The intent of this function is to
	//              provide text-based verification output for development and
	//              debugging. This function is only accessible to instances of
	//              the subclasses of Fighting and each subclass includes a
	//              function with the same name and purpose.

	protected void showValues()
	{
		// Display data stored in the parent class.

		super.showValues();

		// Display data stored in this class.

		System.out.println("Nationality             : " + nationality);

		System.out.println("Identity                : " + identity +
		                   "\tUnit Type       : " + unitType);

		System.out.println("Normal Range            : " + normalRange +
		                   "\tFirepower       : " + firepower);
	}

	// Public access methods

	// getNationality - A function to return the value of the nationality member
	//                  variable to the calling program.

	public String getNationality()
	{
		return (nationality);
	}

	// getIdentity - A function to return the value of the identity member
	//               variable to the calling program.

	public String getIdentity()
	{
		return (identity);
	}

	// getUnitType - A function to return the value of the unitType member
	//               variable to the calling program.

	public String getUnitType()
	{
		return (unitType);
	}

	// getFirepower - A function to return the value of the firepower member
	//                variable to the calling program.

	public int getFirepower()
	{
		return (firepower);
	}

	// getNormalRange - A function to return the value of the normalRange member
	//                  variable to the calling program.

	public int getNormalRange()
	{
		return (normalRange);
	}

	// The following function definitions are necessary in order to allow "Unit"
	// objects to be instantiated that represent any of the public subclasses
	// of the Counters package. These methods are defined as abstract in 
	// Unit.java, making it necessary for subclasses to override them. These
	// method definitions are intended to return a default value to satisfy the
	// compiler and serve as place holders for the actual definitions in
	// subclasses of this one. See the indicated files for a detailed
	// description of each method. The symbolic constants specified are defined
	// above or in Unit.java.
	
	// Mobile.java

	public int getMovement()
	{
		return (MIN_MOVEMENT);
	}

	// Infantry.java

	public String getStatus()
	{
		return (DEFAULT_STATUS);
	}

	public boolean rally(boolean isLeaderPresent,int modifier)
	{
		return (DEFAULT_RESULT);
	}

	public boolean moraleCheck(int modifier)
	{
		return (DEFAULT_RESULT);
	}

	// Squad.java

	public String getClassification()
	{
		return (DEFAULT_CLASSIFICATION);
	}
	
	// Leader.java

	public int getModifier()
	{
		return (DEFAULT_VALUE);
	}
}
