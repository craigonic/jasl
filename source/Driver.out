Thu Jan 18 13:12:54 PST 2018

Leader.toText() output:

Description       : Leader           
Nationality       : German           Unit Type               :                  
Identity          :                                                             
Status            : [Broken]                                                    
Movement          : 6                
Portage Capacity  : 1                Portage Level           : 2                
Firepower         : 0                Firepower Equivalent    : 0                
Normal Range      : 0                
Morale            : 9                Broken Morale           : 9                
Can Self Rally ?  : Yes              
Portage Value     : 0                
Basic Point Value : 0                Experience Level Rating : 4                
Infantry Type     : NONE                                                        
Modifier          : -1               

Leader.toString() output:

9-1 Leader

Testing Exception handling for serialization to and from a file:

Caught: java.lang.NullPointerException: Serialization(serializeToFile) - Null argument received.

Caught: java.lang.IllegalArgumentException: Serialization(serializeToFile) - Invalid argument received (zero length).

Caught: java.lang.NullPointerException: Serialization(deserializeFromFile) - Null argument received.

Caught: java.lang.IllegalArgumentException: Serialization(deserializeFromFile) - Invalid argument received (zero length).

Caught: java.io.FileNotFoundException: /tmp/NonExistentFile (No such file or directory)

(Deserialized) Leader.toText() output:

Description       : Leader           
Nationality       : German           Unit Type               :                  
Identity          : Col. Klink                                                  
Status            : []                                                          
Movement          : 6                
Portage Capacity  : 1                Portage Level           : 2                
Firepower         : 0                Firepower Equivalent    : 0                
Normal Range      : 0                
Morale            : 9                Broken Morale           : 9                
Can Self Rally ?  : Yes              
Portage Value     : 0                
Basic Point Value : 0                Experience Level Rating : 4                
Infantry Type     : NONE                                                        
Modifier          : -1               

(Deserialized) Leader.toString() output:

9-1 Leader (Col. Klink)

(Deserialized) Leader.toJSON() output:

{
 "Description":"LEADER",
 "Unit Label":"9-1 Leader (Col. Klink)",
  "Nationality":"GERMAN",
  "Unit Type":"",
  "Identity":"Col. Klink",
  "Status":0,
   "Movement":6,
   "Portage Capacity":1,
   "Portage Level":2,
    "Firepower":"0",
    "Firepower Equivalent":0,
    "Normal Range":0,
    "Morale":9,
    "Broken Morale":9,
    "Can Self Rally ?":true,
    "Portage Value":0,
    "Basic Point Value":0,
    "Experience Level Rating":4,
    "Infantry Type":"NONE",
     "Modifier":-1
}

Squad.toText() output:

Description       : Squad            
Nationality       : Russian          Unit Type               : Guards           
Identity          :                                                             
Status            : [Desperate]                                                 
Movement          : 4                
Portage Capacity  : 3                Portage Level           : 0                
Firepower         : 6                Firepower Equivalent    : 6                
Normal Range      : 2                
Morale            : 8                Broken Morale           : 8                
Can Self Rally ?  : No               
Portage Value     : 10               
Basic Point Value : 12               Experience Level Rating : 4                
Infantry Type     : GUARDS                                                      
Has Maximum ELR ? : No               Classification          : Elite            
Can Assault Fire ?: Yes              Can Spray Fire ?        : Yes              
Smoke Placement Ex: 0                

Squad.toString() output:

6-2-8 Squad

Testing Exception handling for serialization to and from a byte array:

Caught: java.lang.NullPointerException: Serialization(serializeToByteArray) - Null argument received.

Caught: java.lang.NullPointerException: Serialization(deserializeFromByteArray) - Null argument received.

Caught: java.lang.IllegalArgumentException: Serialization(deserializeFromByteArray) - Invalid argument received (zero length).

(Deserialized) Squad.toText() output:

Description       : Squad            
Nationality       : Russian          Unit Type               : Guards           
Identity          : A                                                           
Status            : [Broken]                                                    
Movement          : 4                
Portage Capacity  : 3                Portage Level           : 0                
Firepower         : 6                Firepower Equivalent    : 6                
Normal Range      : 2                
Morale            : 8                Broken Morale           : 8                
Can Self Rally ?  : No               
Portage Value     : 10               
Basic Point Value : 12               Experience Level Rating : 4                
Infantry Type     : GUARDS                                                      
Has Maximum ELR ? : No               Classification          : Elite            
Can Assault Fire ?: Yes              Can Spray Fire ?        : Yes              
Smoke Placement Ex: 0                

(Deserialized) Squad.toString() output:

6-2-8 Squad (A)

(Deserialized) Squad.toJSON() output:

{
 "Description":"SQUAD",
 "Unit Label":"6-2-8 Squad (A)",
  "Nationality":"RUSSIAN",
  "Unit Type":"Guards",
  "Identity":"A",
  "Status":1,
   "Movement":4,
   "Portage Capacity":3,
   "Portage Level":0,
    "Firepower":"6",
    "Firepower Equivalent":6,
    "Normal Range":2,
    "Morale":8,
    "Broken Morale":8,
    "Can Self Rally ?":false,
    "Portage Value":10,
    "Basic Point Value":12,
    "Experience Level Rating":4,
    "Infantry Type":"GUARDS",
     "Has Maximum ELR ?":false,
     "Classification":"ELITE",
      "Can Assault Fire ?":true,
      "Can Spray Fire ?":true,
      "Smoke Placement Exponent":0
}

Testing the fromJSON() method:

Null JSON input data:

Caught: java.lang.NullPointerException: Unit(fromJSON) - Null argument received.

Empty JSON input data:

Caught: java.lang.IllegalArgumentException: Unit(fromJSON) - Invalid argument received (zero length).

Updating a Squad with Leader data:

Caught: java.lang.IllegalArgumentException: Unit(fromJSON) - Non-matching value (LEADER) for Description

Updating a Squad with an invalid (wrong case) description:

Caught: java.lang.IllegalArgumentException: Unit(fromJSON) - No enum constant jasl.counters.Description.Descriptions.Squad

Updating a Squad with an invalid (non-string) description:

Caught: org.json.JSONException: Unit(fromJSON) - JSONObject["Description"] not a string.

Updating a Squad with a different nationality:

Caught: java.lang.IllegalArgumentException: Fighting(fromJSON) - Non-matching value (GERMAN) for Nationality

Updating a Squad with an invalid (wrong case) nationality:

Caught: java.lang.IllegalArgumentException: Fighting(fromJSON) - No enum constant jasl.counters.Nationality.Nationalities.Russian

Updating a Squad with an invalid (non-string) nationality:

Caught: org.json.JSONException: Fighting(fromJSON) - JSONObject["Nationality"] not a string.

Updating a Squad with a different unit type:

Caught: java.lang.IllegalArgumentException: Fighting(fromJSON) - Non-matching value (Gurkha) for Unit Type

Updating a Squad with an invalid (non-string) unit type:

Caught: org.json.JSONException: Fighting(fromJSON) - JSONObject["Unit Type"] not a string.

Updating a Squad with an invalid (non-string) identity:

Caught: org.json.JSONException: Fighting(fromJSON) - JSONObject["Identity"] not a string.

Updating a Squad with an invalid (negative) status:

Caught: java.lang.IllegalArgumentException: Fighting(fromJSON) - Invalid value (-2) for Status

Updating a Squad with an invalid (non-integer) status:

Caught: org.json.JSONException: Fighting(fromJSON) - JSONObject["Status"] is not an int.

Updating a Squad with a different movement value:

Caught: java.lang.IllegalArgumentException: Mobile(fromJSON) - Non-matching value (3) for Movement

Updating a Squad with an invalid (non-integer) movement value:

Caught: org.json.JSONException: Mobile(fromJSON) - JSONObject["Movement"] is not an int.

Updating a Squad with a different portage capacity:

Caught: java.lang.IllegalArgumentException: Mobile(fromJSON) - Non-matching value (5) for Portage Capacity

Updating a Squad with an invalid (non-integer) portage capacity:

Caught: org.json.JSONException: Mobile(fromJSON) - JSONObject["Portage Capacity"] is not an int.

Updating a Squad with an invalid (negative) portage level:

Caught: java.lang.IllegalArgumentException: Mobile(fromJSON) - Invalid value (-1) for Portage Level

Updating a Squad with an invalid (non-integer) portage level:

Caught: org.json.JSONException: Mobile(fromJSON) - JSONObject["Portage Level"] is not an int.

Updating a Squad with a different firepower value:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (4) for Firepower

Updating a Squad with an invalid (non-string) firepower value:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Firepower"] not a string.

Updating a Squad with a different firepower equivalent value:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (4) for Firepower Equivalent

Updating a Squad with an invalid (non-integer) firepower equivalent value:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Firepower Equivalent"] is not an int.

Updating a Squad with a different normal range value:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (4) for Normal Range

Updating a Squad with an invalid (non-integer) normal range value:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Normal Range"] is not an int.

Updating a Squad with a different morale value:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (7) for Morale

Updating a Squad with an invalid (non-integer) morale value:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Morale"] is not an int.

Updating a Squad with a different broken morale value:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (7) for Broken Morale

Updating a Squad with an invalid (non-integer) broken morale value:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Broken Morale"] is not an int.

Updating a Squad with a different can self rally setting:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (true) for Can Self Rally ?

Updating a Squad with an invalid (non-boolean) can self rally setting:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Can Self Rally ?"] is not a Boolean.

Updating a Squad with a different portage value:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (9) for Portage Value

Updating a Squad with an invalid (non-integer) portage value:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Portage Value"] is not an int.

Updating a Squad with a different basic point value:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (52) for Basic Point Value

Updating a Squad with an invalid (non-integer) basic point value:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Basic Point Value"] is not an int.

Updating a Squad with a different experience level rating:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (3) for Experience Level Rating

Updating a Squad with an invalid (non-integer) experience level rating:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Experience Level Rating"] is not an int.

Updating a Squad with a different infantry type:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - Non-matching value (NONE) for Infantry Type

Updating a Squad with an invalid (wrong case) infantry type:

Caught: java.lang.IllegalArgumentException: Infantry(fromJSON) - No enum constant jasl.counters.UnitType.InfantryTypes.Guards

Updating a Squad with an invalid (non-string) infantry type:

Caught: org.json.JSONException: Infantry(fromJSON) - JSONObject["Infantry Type"] not a string.

Updating a Squad with a different has maximum ELR setting:

Caught: java.lang.IllegalArgumentException: Personnel(fromJSON) - Non-matching value (true) for Has Maximum ELR ?

Updating a Squad with an invalid (non-boolean) has maximum ELR setting:

Caught: org.json.JSONException: Personnel(fromJSON) - JSONObject["Has Maximum ELR ?"] is not a Boolean.

Updating a Squad with a different classification:

Caught: java.lang.IllegalArgumentException: Personnel(fromJSON) - Non-matching value (FIRST_LINE) for Classification

Updating a Squad with an invalid (wrong case) classification:

Caught: java.lang.IllegalArgumentException: Personnel(fromJSON) - No enum constant jasl.counters.Classification.Classifications.Elite

Updating a Squad with an invalid (non-string) classification:

Caught: org.json.JSONException: Personnel(fromJSON) - JSONObject["Classification"] not a string.

Updating a Squad with a different can assault fire setting:

Caught: java.lang.IllegalArgumentException: Squad(fromJSON) - Non-matching value (false) for Can Assault Fire ?

Updating a Squad with an invalid (non-boolean) can assault fire setting:

Caught: org.json.JSONException: Squad(fromJSON) - JSONObject["Can Assault Fire ?"] is not a Boolean.

Updating a Squad with a different can spray fire setting:

Caught: java.lang.IllegalArgumentException: Squad(fromJSON) - Non-matching value (false) for Can Spray Fire ?

Updating a Squad with an invalid (non-boolean) can spray fire setting:

Caught: org.json.JSONException: Squad(fromJSON) - JSONObject["Can Spray Fire ?"] is not a Boolean.

Updating a Squad with a different smoke placement exponent value:

Caught: java.lang.IllegalArgumentException: Squad(fromJSON) - Non-matching value (3) for Smoke Placement Exponent

Updating a Squad with an invalid (non-integer) smoke placement exponent value:

Caught: org.json.JSONException: Squad(fromJSON) - JSONObject["Smoke Placement Exponent"] is not an int.

Updating a Leader with a different modifier value:

Caught: java.lang.IllegalArgumentException: Leader(fromJSON) - Non-matching value (-2) for Modifier

Updating a Leader with an invalid (non-integer) modifier value:

Caught: org.json.JSONException: Leader(fromJSON) - JSONObject["Modifier"] is not an int.

(Updated with fromJSON()) Squad.toJSON() output:

{
 "Description":"SQUAD",
 "Unit Label":"6-2-8 Squad (B)",
  "Nationality":"RUSSIAN",
  "Unit Type":"Guards",
  "Identity":"B",
  "Status":0,
   "Movement":4,
   "Portage Capacity":3,
   "Portage Level":2,
    "Firepower":"6",
    "Firepower Equivalent":6,
    "Normal Range":2,
    "Morale":8,
    "Broken Morale":8,
    "Can Self Rally ?":false,
    "Portage Value":10,
    "Basic Point Value":12,
    "Experience Level Rating":4,
    "Infantry Type":"GUARDS",
     "Has Maximum ELR ?":false,
     "Classification":"ELITE",
      "Can Assault Fire ?":true,
      "Can Spray Fire ?":true,
      "Smoke Placement Exponent":0
}

Testing the Unit.factory() method:

(Created with Unit.factory()) Leader.toJSON() output:

{
 "Description":"LEADER",
 "Unit Label":"8-1 Leader",
  "Nationality":"AMERICAN",
  "Unit Type":"",
  "Identity":"",
  "Status":0,
   "Movement":6,
   "Portage Capacity":1,
   "Portage Level":0,
    "Firepower":"0",
    "Firepower Equivalent":0,
    "Normal Range":0,
    "Morale":8,
    "Broken Morale":8,
    "Can Self Rally ?":true,
    "Portage Value":0,
    "Basic Point Value":0,
    "Experience Level Rating":3,
    "Infantry Type":"NONE",
     "Modifier":-1
}

(Created with Unit.factory()) Squad.toJSON() output:

{
 "Description":"SQUAD",
 "Unit Label":"6-6-6 Squad",
  "Nationality":"AMERICAN",
  "Unit Type":"",
  "Identity":"",
  "Status":0,
   "Movement":4,
   "Portage Capacity":3,
   "Portage Level":0,
    "Firepower":"6",
    "Firepower Equivalent":6,
    "Normal Range":6,
    "Morale":6,
    "Broken Morale":6,
    "Can Self Rally ?":false,
    "Portage Value":10,
    "Basic Point Value":11,
    "Experience Level Rating":3,
    "Infantry Type":"NONE",
     "Has Maximum ELR ?":false,
     "Classification":"FIRST_LINE",
      "Can Assault Fire ?":true,
      "Can Spray Fire ?":false,
      "Smoke Placement Exponent":3
}

Testing Exception handling for Unit.factory() method:

Null JSON input data:

Caught: java.lang.NullPointerException: Unit(factory) - Null argument received.

Empty JSON input data:

Caught: java.lang.IllegalArgumentException: Unit(factory) - Invalid argument received (zero length).

Invalid (wrong case) Description value:

Caught: java.lang.IllegalArgumentException: Unit(factory) - No enum constant jasl.counters.Description.Descriptions.Leader

Invalid (non-string) Description value:

Caught: org.json.JSONException: Unit(factory) - JSONObject["Description"] not a string.

Invalid (wrong case) Nationality value:

Caught: java.lang.IllegalArgumentException: Unit(factory) - No enum constant jasl.counters.Nationality.Nationalities.American

Invalid (non-string) Nationality value:

Caught: org.json.JSONException: Unit(factory) - JSONObject["Nationality"] not a string.

Invalid (less than minimum) modifier argument:

Caught: java.lang.IllegalArgumentException: Unit(factory) - Leader(constructor) - Invalid argument(s) received : -4

Invalid (for nationality) Classification value:

Caught: java.lang.IllegalArgumentException: Unit(factory) - Personnel(constructor) - Invalid argument(s) received : American and SS

Invalid (wrong case) Classification value:

Caught: java.lang.IllegalArgumentException: Unit(factory) - No enum constant jasl.counters.Classification.Classifications.Green

Invalid (non-string) Classification value:

Caught: org.json.JSONException: Unit(factory) - JSONObject["Classification"] not a string.

Building Unit array with a Leader & 3 Squads

Displaying Unit array with a Leader & 3 Squads

UnitList[0]:	9-0 Commissar (Commissar Ryzhiy)

Leader
Commissar Ryzhiy
Commissar
6
[]

UnitList[1]:	6-2-8 Squad (X)

Squad
X
Guards
4
[]

UnitList[2]:	4-4-7 Squad (Y)

Squad
Y

4
[Broken]

UnitList[3]:	4-2-6 Squad (Z)

Squad
Z

3
[Desperate]

Testing Exception handling for Squad update methods:

Invalid portage level argument:

Caught: java.lang.IllegalArgumentException: Mobile(setPortageLevel) - Invalid argument(s) received : -1

Testing Exception handling during Squad creation:

Incompatible nationality and unitType arguments:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : British and Engineers

Incompatible description and unitType arguments:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : Squad and Commissar

Invalid (less than 0) firepower argument:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : -1

Invalid (greater than maximum) firepower argument:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : 11

Invalid (less than 0) normal range argument:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : -255

Invalid (less than 0) morale argument:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : -1

Invalid (greater than maximum) morale argument:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : 11

Invalid (less than 0) broken morale argument:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : -7

Invalid (greater than maximum) broken morale argument:

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : 17

Invalid (less than zero) Basic Point Value (BPV):

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : -1

Invalid (less than zero) Experience Level Rating (ELR):

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : -1

Invalid (greater than maximum) Experience Level Rating (ELR):

Caught: java.lang.IllegalArgumentException: Infantry(constructor) - Invalid argument(s) received : 6

Incompatible classification argument (nationality mismatch):

Caught: java.lang.IllegalArgumentException: Personnel(constructor) - Invalid argument(s) received : Italian and SS

Incompatible classification argument (invalid setting):

Caught: java.lang.IllegalArgumentException: Personnel(constructor) - Invalid argument(s) received : Partisan and Elite

Invalid (less than zero) Smoke Placement Exponent:

Caught: java.lang.IllegalArgumentException: Squad(constructor) - Invalid argument(s) received : -4

Invalid (greater than maximum) Smoke Placement Exponent:

Caught: java.lang.IllegalArgumentException: Squad(constructor) - Invalid argument(s) received : 4

Testing Exception handling during Leader creation:

Invalid (less than minimum) modifier argument:

Caught: java.lang.IllegalArgumentException: Leader(constructor) - Invalid argument(s) received : -4

Invalid (greater than maximum) modifier argument:

Caught: java.lang.IllegalArgumentException: Leader(constructor) - Invalid argument(s) received : 4

Testing the operations of the Scenario class:

Scenario.toText() output:

Name:	Test Scenario
Starting side:	Allies

Scenario.toString() output:

Test Scenario

Testing Exception handling for Scenario.load() method:

Null InputStream:

Caught: java.lang.NullPointerException: Scenario(load) - Null argument received.

Null filename:

Caught: java.lang.NullPointerException: Scenario(load) - Null argument received.

Invalid filename:

Caught: java.io.FileNotFoundException: scenarios/The Guard Counterattack.json (No such file or directory)

Null StringBuffer:

Caught: java.lang.NullPointerException: Scenario(load) - Null argument received.

Empty scenario name value:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Scenario name is empty.

Invalid (non-string) scenario name value:

Caught: org.json.JSONException: Scenario(load) - JSONObject["name"] not a string.

Invalid (wrong case) starting side value:

Caught: java.lang.IllegalArgumentException: Scenario(load) - No enum constant jasl.ui.data.Side.Sides.Allies

Invalid (non-string) starting side value:

Caught: org.json.JSONException: Scenario(load) - JSONObject["starting side"] not a string.

Invalid sides array entry:

Caught: org.json.JSONException: Scenario(load) - Expected a ',' or '}' at 63 [character 1 line 5]

Invalid (wrong case) side value:

Caught: java.lang.IllegalArgumentException: Scenario(load) - No enum constant jasl.ui.data.Side.Sides.Allies

Invalid (non-string) side value:

Caught: org.json.JSONException: Scenario(load) - JSONObject["side"] not a string.

Less than minimum experience level rating:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : Experience Level Rating (-1) < 0 or > 5

Greater than maximum experience level rating:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : Experience Level Rating (6) < 0 or > 5

Invalid (non-integer) experience level rating:

Caught: org.json.JSONException: Scenario(load) - JSONObject["Experience Level Rating"] is not an int.

Less than minimum sniper activation number:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : SAN (-1) < 0, 1, or > 7

Initial sniper activation number of 1:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : SAN (1) < 0, 1, or > 7

Greater than maximum sniper activation number:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : SAN (8) < 0, 1, or > 7

Invalid (non-integer) sniper activation number:

Caught: org.json.JSONException: Scenario(load) - JSONObject["SAN"] is not an int.

Less than minimum number of turns:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : turns (-5) < 0

Invalid (non-integer) number of turns:

Caught: org.json.JSONException: Scenario(load) - JSONObject["turns"] is not an int.

Invalid (non-boolean) sets up first setting:

Caught: org.json.JSONException: Scenario(load) - JSONObject["sets up first"] is not a Boolean.

Invalid formations array entry:

Caught: org.json.JSONException: Scenario(load) - Expected a ',' or '}' at 170 [character 1 line 13]

Empty formation name value:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Formation name is empty.

Invalid (non-string) formation name value:

Caught: org.json.JSONException: Scenario(load) - JSONObject["name"] not a string.

Less than minimum entry turn value:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : entry turn (-1) < 0 or > 5

Greater than maximum entry turn value:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : entry turn (6) < 0 or > 5

Invalid (non-integer) entry turn value:

Caught: org.json.JSONException: Scenario(load) - JSONObject["entry turn"] is not an int.

Invalid units array entry:

Caught: org.json.JSONException: Scenario(load) - Expected a ',' or '}' at 219 [character 1 line 18]

Less than minimum copies value:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Invalid argument(s) received : copies (-1) < 1

Invalid (non-integer) copies value:

Caught: org.json.JSONException: Scenario(load) - JSONObject["copies"] is not an int.

Out-of-range parameter value for new Unit object:

Caught: java.lang.IllegalArgumentException: Scenario(load) - Unit(factory) - Infantry(constructor) - Invalid argument(s) received : -1

Invalid (non-integer) parameter value for new Unit object:

Caught: org.json.JSONException: Scenario(load) - Unit(factory) - JSONObject["Morale"] is not an int.

Testing the operations of the Game class:

Side:	Allies

	Nationalities:	"American" "British" "Russian" "French" "Partisan" "Allied Minor" 

Player:	Pixie

	Nationality:	American
	Entry Turn :	1

	Units:
		9-1 Leader
		7-4-7 Squad
		7-4-7 Squad
		7-4-7 Squad

Side:	Axis

	Nationalities:	"German" "Japanese" "Italian" "Finnish" "Axis Minor" 

Player:	Buddy

	Nationality:	German
	Entry Turn :	1

	Units:
		8-1 Leader
		6-5-8 Squad
		6-5-8 Squad
		6-5-8 Squad

Active side   :	Allies
Setup Complete:	false

