# Instructions for cleaning and rebuilding everything. This may become a target
# in the Makefile, someday ;)

# Go to the source.

cd $JASL_BASE/source

# Clean everything.

(cd cni-wrapper;make clean_hdr clean_libs)
(cd jni-wrapper;make clean_hdr clean_libs)
(cd org;make clean clean_jar clean_hdr clean_libs)
make clean_all
(cd jasl;make clean_hdr clean_libs)
(cd jni-wrapper/jasl;make clean_hdr clean_libs)
(cd swig;make clean_all)
(cd scenarios;make clean)

# Build the libraries and install the header files.

if [ -e $JASL_BASE/tools ]
then
	(cd cni-wrapper;make libs hdr)
fi

(cd jni-wrapper;make libs hdr)
(cd org;make jar)

if [ -e $JASL_BASE/tools ]
then
	(cd org;make libs hdr)
	(cd jasl;make libs hdr)
fi

	(cd jni-wrapper/jasl;make libs hdr)

# Build the wrapper libraries. Note that the Makefile may require editing to set
# the correct path(s) for the Perl and/or Python headers.

make clean_all

if [ -e $JASL_BASE/tools ]
then
	(cd swig;make libs)
fi

# Build all the executables and install the scenarios.

if [ -e $JASL_BASE/tools ]
then
	make gcj
	make gcj_dynamic
	make gcj_static
	make build_cpp_dynamic
	make build_cpp_static
fi

make build_cxx_dynamic
make build_cxx_static
make org.craigonic.jasl.jar
make scenarios

make clean_obj

# Install the scripts. Note that the installed version of Driver.py may require
# editing to set the correct system path.

if [ -e $JASL_BASE/tools ]
then
	make perl python
fi

# Test everything.

make test_jar
make test
if [ -e $JASL_BASE/tools ]
then
	make test_gcj
	make test_gcj_dynamic
	make test_gcj_static
	make test_cpp_dynamic
	make test_cpp_static
fi
make test_cxx_dynamic
make test_cxx_static
if [ -e $JASL_BASE/tools ]
then
	make test_perl
	make test_python
fi

# Build all of the documentation. This requires a network connection for
# javadoc to work correctly.

make -k all_docs

# Update the ctags file.

make ctags

## Instructions for creating a build to test code coverage. Note that this will
## require the installation of lcov or gcovr, either of which can be used to
## generated summarized results. The following commands should be executed from
## this directory (source).

# Run this file as a script. This will clean everything and do a full rebuild.

#	sh -x README

# 	export JASL_COMPILER_FLAGS="-O0 --coverage"

# Change the OBJ_SUB_DIRECTORY setting in ../util/jasl.make from ".obj" to ".".

# Build the jasl libraries again as follows. This, along with the change to
# OBJ_SUB_DIRECTORY, is necessary for the .gcno and .gcda files to be generated
# and work correctly.

#	(cd jasl/utilities;make clean_libs;make dynamic_lib)
#	(cd jasl/counters;make clean_libs;make dynamic_lib)
#	(cd jasl/ui/data;make clean_libs;make dynamic_lib)

# 	make build_cpp_dynamic

# 	make test_cpp_dynamic

# The following command uses gcovr to create an HTML summary of the coverage
# statistics in /tmp. Adjust accordingly if using lcov.

#	gcovr -r . --html --html-details -o /tmp/jasl_coverage.html

# Cleanup. Restore the original setting for OBJ_SUB_DIRECTORY and run the
# following commands.

#	find . -type f -name "*.gcda" -exec rm {} \;
#	find . -type f -name "*.gcno" -exec rm {} \;
#	find . -type f -name "*.o" -exec rm {} \;
#	unset JASL_COMPILER_FLAGS

# Rebuild everything for "normal" development / operation.

#	sh -x README
