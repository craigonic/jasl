################################################################################
# Driver.py - This file contains the Driver script, which is used to test the  #
#             functionality of the public <A HREF="http://java.sun.com/">Java</A> classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.python.org/">Python</A> using <A HREF="swig/swig.html">libraries</A> and files  #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The <A HREF="http://gcc.gnu.org/onlinedocs/gcj/About-CNI.html#About-CNI">CNI</A> (Compiled Native Interface) <A HREF="http://gcc.gnu.org/onlinedocs/gcj/Invocation.html#Invocation">invocation</A> functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java <A HREF="http://java.sun.com/javase/7/docs/api/java/lang/String.html">String</A>.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

import sys
sys.path.append("/home/campbell/jasl/lib/jasl/python")

from CniWrapper import *
from Counters   import *
from Utilities  import *

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#cni_wrapper = CniWrapper_instance()

# A call to the valueOf() method of each of the following enums is necessary in
# order to use the constants associated with the type/object directly.

nationality    = Nationalities_valueOf(cc2js("AMERICAN"))
unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("GREEN"));
state          = States_valueOf(cc2js("NORMAL"));

# Create an instance of a German Leader.

germanLeader = Leader(cvar.Nationalities_GERMAN,
                      cvar.InfantryTypes_NONE,
                      9,9,4,-1)

germanLeader.setIdentity(cc2js("Lt. Fellbaum"));

# Display all of the entered values for this instance using the toString()
# method.

print "Leader.toString() output:\n\n%s" % js2cc(germanLeader.toString())

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

print "Leader class access methods and output :\n"

print "\tdescription(): %s"           % js2cc(germanLeader.description())

print "\tidentity(): %s"              % js2cc(germanLeader.identity())
print "\tnationality(): %s"           % js2cc(germanLeader.nationality())
print "\tstatus(): %s"                % js2cc(germanLeader.status())
print "\tunitType(): %s"              % js2cc(germanLeader.unitType())

print "\tmovement(): %d"              % germanLeader.movement()
print "\tportageCapacity(): %d"       % germanLeader.portageCapacity()
print "\tportageLevel(): %d"          % germanLeader.portageLevel()

print "\tbasicPointValue(): %d"       % germanLeader.basicPointValue()
print "\tbrokenMorale(): %d"          % germanLeader.brokenMorale()
print "\tcanSelfRally(): %d"          % germanLeader.canSelfRally()
print "\texperienceLevelRating(): %d" % germanLeader.experienceLevelRating()
print "\tfirepower(): %s"             % js2cc(germanLeader.firepower())
print "\tfirepowerEquivalent(): %d"   % germanLeader.firepowerEquivalent()
print "\tmorale(): %d"                % germanLeader.morale()
print "\tnormalRange(): %d"           % germanLeader.normalRange()
print "\tportageValue(): %d"          % germanLeader.portageValue()

print "\tmodifier(): %d"              % germanLeader.modifier()

# Create an instance of a Russian Squad.

russianSquad = Squad(cvar.Nationalities_RUSSIAN,
                     cvar.InfantryTypes_GUARDS,
                     6,2,8,8,0,12,4,0,
                     cvar.Classifications_ELITE,1,1,0)

russianSquad.setIdentity(cc2js("A"));

# Display all of the entered values for this instance using the toString()
# method.

print "\nSquad.toString() output:\n\n%s" % js2cc(russianSquad.toString())

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

print "Squad class access methods and output :\n"

print "\tdescription(): %s"            % js2cc(russianSquad.description())

print "\tidentity(): %s"               % js2cc(russianSquad.identity())
print "\tnationality(): %s"            % js2cc(russianSquad.nationality())
print "\tstatus(): %s"                 % js2cc(russianSquad.status())
print "\tunitType(): %s"               % js2cc(russianSquad.unitType())

print "\tmovement(): %d"               % russianSquad.movement()
print "\tportageCapacity(): %d"        % russianSquad.portageCapacity()
print "\tportageLevel(): %d"           % russianSquad.portageLevel()

print "\tbasicPointValue(): %d"        % russianSquad.basicPointValue()
print "\tbrokenMorale(): %d"           % russianSquad.brokenMorale()
print "\tcanSelfRally(): %d"           % russianSquad.canSelfRally()
print "\texperienceLevelRating(): %d"  % russianSquad.experienceLevelRating()
print "\tfirepower(): %s"              % js2cc(russianSquad.firepower())
print "\tfirepowerEquivalent(): %d"    % russianSquad.firepowerEquivalent()
print "\tmorale(): %d"                 % russianSquad.morale()
print "\tnormalRange(): %d"            % russianSquad.normalRange()
print "\tportageValue(): %d"           % russianSquad.portageValue()

print "\tclassification(): %s"         % js2cc(russianSquad.classification())
print "\thasMaximumELR(): %d"          % russianSquad.hasMaximumELR()

print "\tcanAssaultFire(): %d"         % russianSquad.canAssaultFire()
print "\tcanSprayFire(): %d"           % russianSquad.canSprayFire()
print "\tsmokePlacementExponent(): %d" % russianSquad.smokePlacementExponent()

# Create an instance of a German Squad (that throws some exceptions).

# NULL Nationality

print "\nTesting Exception handling during Squad creation:"
print "\nNull nationality parameter:\n"

#germanSquad = Squad(cc2js(None),
#                    cc2js("5"),
#                    cc2js("Squad"),
#                    cc2js("4"),6,1,7,7,0,10,3,0,
#                    cc2js("1st Line"),0,1)

# Test the Dice class.

print "Testing the execution of the Dice class:\n"

for i in (list(range(12))):
    dice = Dice()

#   print "Access methods test - White: %d" % dice.whiteDieValue() + \
#         " Colored: %d"  % dice.coloredDieValue() + \
#         " Combined: %2d" % dice.combinedResult()

    print "%s" % (js2cc(dice.toString()))
