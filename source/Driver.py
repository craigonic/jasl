################################################################################
# Driver.py - This file contains the Driver script, which is used to test the  #
#             functionality of the public <A HREF="http://java.sun.com/">Java</A> classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.python.org/">Python</A> using <A HREF="swig/swig.html">libraries</A> and files  #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The <A HREF="http://gcc.gnu.org/onlinedocs/gcj/About-CNI.html#About-CNI">CNI</A> (Compiled Native Interface) <A HREF="http://gcc.gnu.org/onlinedocs/gcj/Invocation.html#Invocation">invocation</A> functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java <A HREF="http://java.sun.com/javase/7/docs/api/java/lang/String.html">String</A>.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

import sys
sys.path.append("/home/campbell/jasl/lib/jasl/python")

from CniWrapper import *
from Counters   import *
from Utilities  import *

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#cni_wrapper = CniWrapper_instance()

# A call to the valueOf() method of each of the following enums is necessary in
# order to use the constants associated with the type/object directly.

nationality    = Nationalities_valueOf(cc2js("AMERICAN"))
unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("GREEN"))
state          = States_valueOf(cc2js("NORMAL"))

# Create an instance of a German Leader.

germanLeader = Leader(cvar.Nationalities_GERMAN,
                      cvar.InfantryTypes_NONE,
                      9,9,4,-1)

germanLeader.setIdentity(cc2js("Lt. Fellbaum"))

# Display all of the entered values for this instance using the toString()
# method.

print "\nLeader.toString() output:\n\n%s" % js2cc(germanLeader.toString())

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

#print "Leader class access methods and output :\n"

#print "\tdescription(): %s"           % js2cc(germanLeader.description())

#print "\tidentity(): %s"              % js2cc(germanLeader.identity())
#print "\tnationality(): %s"           % js2cc(germanLeader.nationality())
#print "\tstatus(): %s"                % js2cc(germanLeader.status())
#print "\tunitType(): %s"              % js2cc(germanLeader.unitType())

#print "\tmovement(): %d"              % germanLeader.movement()
#print "\tportageCapacity(): %d"       % germanLeader.portageCapacity()
#print "\tportageLevel(): %d"          % germanLeader.portageLevel()

#print "\tbasicPointValue(): %d"       % germanLeader.basicPointValue()
#print "\tbrokenMorale(): %d"          % germanLeader.brokenMorale()
#print "\tcanSelfRally(): %d"          % germanLeader.canSelfRally()
#print "\texperienceLevelRating(): %d" % germanLeader.experienceLevelRating()
#print "\tfirepower(): %s"             % js2cc(germanLeader.firepower())
#print "\tfirepowerEquivalent(): %d"   % germanLeader.firepowerEquivalent()
#print "\tmorale(): %d"                % germanLeader.morale()
#print "\tnormalRange(): %d"           % germanLeader.normalRange()
#print "\tportageValue(): %d"          % germanLeader.portageValue()

#print "\tmodifier(): %d"              % germanLeader.modifier()

# Serialize the Leader object, write the data to a file (Leader.ser), then
# deserialize the data into a new object.

germanLeader.setIdentity(cc2js("Col. Klink"))

serializationFile = cc2js("/tmp/Leader.ser");

Serialization_serializeToFile(toObject(germanLeader),serializationFile);

unit = fromObject(Serialization_deserializeFromFile(serializationFile));

# Display all of the entered values for the deserialized instance using the
# toString() method.

print "(Deserialized) Leader.toString() output:\n\n%s" % js2cc(unit.toString())

# Create an instance of a Russian Squad.

russianSquad = Squad(cvar.Nationalities_RUSSIAN,
                     cvar.InfantryTypes_GUARDS,
                     6,2,8,8,0,12,4,0,
                     cvar.Classifications_ELITE,1,1,0)

russianSquad.setIdentity(cc2js("A"))

# Display all of the entered values for this instance using the toString()
# method.

print "Squad.toString() output:\n\n%s" % js2cc(russianSquad.toString())

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

#print "Squad class access methods and output :\n"

#print "\tdescription(): %s"            % js2cc(russianSquad.description())

#print "\tidentity(): %s"               % js2cc(russianSquad.identity())
#print "\tnationality(): %s"            % js2cc(russianSquad.nationality())
#print "\tstatus(): %s"                 % js2cc(russianSquad.status())
#print "\tunitType(): %s"               % js2cc(russianSquad.unitType())

#print "\tmovement(): %d"               % russianSquad.movement()
#print "\tportageCapacity(): %d"        % russianSquad.portageCapacity()
#print "\tportageLevel(): %d"           % russianSquad.portageLevel()

#print "\tbasicPointValue(): %d"        % russianSquad.basicPointValue()
#print "\tbrokenMorale(): %d"           % russianSquad.brokenMorale()
#print "\tcanSelfRally(): %d"           % russianSquad.canSelfRally()
#print "\texperienceLevelRating(): %d"  % russianSquad.experienceLevelRating()
#print "\tfirepower(): %s"              % js2cc(russianSquad.firepower())
#print "\tfirepowerEquivalent(): %d"    % russianSquad.firepowerEquivalent()
#print "\tmorale(): %d"                 % russianSquad.morale()
#print "\tnormalRange(): %d"            % russianSquad.normalRange()
#print "\tportageValue(): %d"           % russianSquad.portageValue()

#print "\tclassification(): %s"         % js2cc(russianSquad.classification())
#print "\thasMaximumELR(): %d"          % russianSquad.hasMaximumELR()

#print "\tcanAssaultFire(): %d"         % russianSquad.canAssaultFire()
#print "\tcanSprayFire(): %d"           % russianSquad.canSprayFire()
#print "\tsmokePlacementExponent(): %d" % russianSquad.smokePlacementExponent()

# Simple function to prepend "Caught: " to the beginning of an exception message
# returned by the tests below. This is done primarily to modify the output to
# match that of the other test programs.

def printException(detail):
    print "\nCaught: %s" % detail

# Create an instance of a German Squad (that throws some exceptions).

print "Testing Exception handling during Squad creation:"

nationality    = cvar.Nationalities_BRITISH
unitType       = cvar.InfantryTypes_ENGINEERS
classification = cvar.Classifications_FIRST_LINE

# Incompatible nationality and unitType

print "\nIncompatible nationality and unitType parameters:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

nationality    = cvar.Nationalities_RUSSIAN
unitType       = cvar.InfantryTypes_COMMISSAR
classification = cvar.Classifications_GREEN

# Incompatible description and unitType

print "\nIncompatible description and unitType parameters:"

try:
    squad = Squad(nationality,unitType,4,4,7,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

nationality    = cvar.Nationalities_GERMAN
unitType       = cvar.InfantryTypes_NONE
classification = cvar.Classifications_FIRST_LINE

# Invalid Firepower

print "\nInvalid (less than 0) firepower parameter:"

try:
    squad = Squad(nationality,unitType,-1,6,7,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

print "\nInvalid (greater than maximum) firepower parameter:"

try:
    squad = Squad(nationality,unitType,11,6,7,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Range

print "\nInvalid (less than 0) normal range parameter:"

try:
    squad = Squad(nationality,unitType,4,-255,7,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Morale (Minimum)

print "\nInvalid (less than 0) morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,-1,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Morale (Maximum)

print "\nInvalid (greater than maximum) morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,11,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Broken Morale (Minimum)

print "\nInvalid (less than 0) broken morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,7,-7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Broken Morale (Maximum)

print "\nInvalid (greater than maximum) broken morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,7,17,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Basic Point Value (BPV)

print "\nInvalid (less than zero) Basic Point Value (BPV):"

try:
    squad = Squad(nationality,unitType,4,6,7,7,0,-1,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Experience Level Rating (Minimum)

print "\nInvalid (less than zero) Experience Level Rating (ELR):"

try:
    squad = Squad(nationality,unitType,4,6,7,7,0,10,-1,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

# Invalid Experience Level Rating (Maximum)

print "\nInvalid (greater than maximum) Experience Level Rating (ELR):"

try:
    squad = Squad(nationality,unitType,4,6,7,7,0,10,6,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

nationality    = cvar.Nationalities_ITALIAN
classification = cvar.Classifications_SS

# Incompatible Classification

print "\nIncompatible classification parameter:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,0,10,3,0,classification,1,0,0)
except ValueError as detail:
    printException(detail)

nationality    = cvar.Nationalities_GERMAN
classification = cvar.Classifications_SECOND_LINE

# Invalid Smoke Placement Exponent (Minimum)

print "\nInvalid (less than zero) Smoke Placement Exponent:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,0,10,3,0,classification,1,0,-4)
except ValueError as detail:
    printException(detail)

# Invalid Smoke Placement Exponent (Maximum)

print "\nInvalid (greater than maximum) Smoke Placement Exponent:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,0,10,3,0,classification,1,0,4)
except ValueError as detail:
    printException(detail)

# Create an instance of a Canadian Leader (that throws an exception).
# NOTE: It is only necessary to test the modifier, since all the other
#       exceptions have been tested above as part of the creation of a Squad.

print "\nTesting Exception handling during Leader creation:"

nationality    = cvar.Nationalities_BRITISH
unitType       = cvar.InfantryTypes_CANADIAN

# Invalid Modifier (Minimum)

print "\nInvalid (less than minimum) modifier parameter:"

try:
    leader = Leader(nationality,unitType,10,10,5,-4)
except ValueError as detail:
    printException(detail)

# Invalid Modifier (Maximum)

print "\nInvalid (greater than maximum) modifier parameter:"

try:
    leader = Leader(nationality,unitType,10,10,5,4)
except ValueError as detail:
    printException(detail)

# Test the Dice class.

print "\nTesting the execution of the Dice class:\n"

for i in (list(range(12))):
    dice = Dice()

#   print "Access methods test - White: %d" % dice.whiteDieValue() + \
#         " Colored: %d"  % dice.coloredDieValue() + \
#         " Combined: %2d" % dice.combinedResult()

    print "%s" % (js2cc(dice.toString()))
