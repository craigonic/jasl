################################################################################
# Driver.py - This file contains the Driver script, which is used to test the  #
#             functionality of the public <A HREF="http://java.sun.com/">Java</A> classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.python.org/">Python</A> using <A HREF="swig/swig.html">libraries</A> and files  #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The <A HREF="http://gcc.gnu.org/onlinedocs/gcj/About-CNI.html#About-CNI">CNI</A> (Compiled Native Interface) <A HREF="http://gcc.gnu.org/onlinedocs/gcj/Invocation.html#Invocation">invocation</A> functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java <A HREF="http://java.sun.com/javase/7/docs/api/java/lang/String.html">String</A>.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

import sys
sys.path.append("/home/campbell/jasl/lib/jasl/python")

from CniWrapper import *
from Counters   import *
from Utilities  import *

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#cni_wrapper = CniWrapper_instance()

# Create an instance of a German Leader.

germanLeader = Leader(cc2js("German"),
                      cc2js("Lt. Fellbaum"),
                      cc2js("Leader"),9,9,4,-1)

# Display all of the entered values for this instance using the toString()
# method.

print "Leader.toString() output:\n\n%s" % js2cc(germanLeader.toString())

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

print "Leader class access methods and output :\n"

print "\tgetDescription(): %s"     % js2cc(germanLeader.getDescription())

print "\tcanSprayFire(): %d"       % germanLeader.canSprayFire()
print "\tgetFirepower(): %s"       % js2cc(germanLeader.getFirepower())
print "\tgetIdentity(): %s"        % js2cc(germanLeader.getIdentity())
print "\tgetNationality(): %s"     % js2cc(germanLeader.getNationality())
print "\tgetNormalRange(): %s"     % js2cc(germanLeader.getNormalRange())
print "\tgetPortageValue(): %s"    % js2cc(germanLeader.getPortageValue())
print "\tgetUnitType(): %s"        % js2cc(germanLeader.getUnitType())

print "\tgetMovement(): %s"        % js2cc(germanLeader.getMovement())
print "\tgetPortageCapacity(): %s" % js2cc(germanLeader.getPortageCapacity())
print "\tgetPortageLevel(): %s"    % js2cc(germanLeader.getPortageLevel())

print "\tcanSelfRally(): %d"       % germanLeader.canSelfRally()
print "\tgetBPV(): %s"             % js2cc(germanLeader.getBPV())
print "\tgetBrokenMorale(): %s"    % js2cc(germanLeader.getBrokenMorale())
print "\tgetELR(): %s"             % js2cc(germanLeader.getELR())
print "\tgetMorale(): %s"          % js2cc(germanLeader.getMorale())
print "\tgetStatus(): %s"          % js2cc(germanLeader.getStatus())

print "\tgetModifier(): %s"        % js2cc(germanLeader.getModifier())

#print "\nConstant string test: %s" % \
#      js2cc(cvar.Leader_MODIFIER_LABEL)

# Create an instance of a Russian Squad.

russianSquad = Squad(cc2js("Russian"),
                     cc2js("A"),
                     cc2js("Guards"),
                     cc2js("6"),2,1,8,8,0,12,4,0,
                     cc2js("Elite"),1,0)

# Display all of the entered values for this instance using the toString()
# method.

print "\nSquad.toString() output:\n\n%s" % js2cc(russianSquad.toString())

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

print "Squad class access methods and output :\n"

print "\tgetDescription(): %s"     % js2cc(russianSquad.getDescription())

print "\tcanSprayFire(): %d"       % russianSquad.canSprayFire()
print "\tgetFirepower(): %s"       % js2cc(russianSquad.getFirepower())
print "\tgetIdentity(): %s"        % js2cc(russianSquad.getIdentity())
print "\tgetNationality(): %s"     % js2cc(russianSquad.getNationality())
print "\tgetNormalRange(): %s"     % js2cc(russianSquad.getNormalRange())
print "\tgetPortageValue(): %s"    % js2cc(russianSquad.getPortageValue())
print "\tgetUnitType(): %s"        % js2cc(russianSquad.getUnitType())

print "\tgetMovement(): %s"        % js2cc(russianSquad.getMovement())
print "\tgetPortageCapacity(): %s" % js2cc(russianSquad.getPortageCapacity())
print "\tgetPortageLevel(): %s"    % js2cc(russianSquad.getPortageLevel())

print "\tcanSelfRally(): %d"       % russianSquad.canSelfRally()
print "\tgetBPV(): %s"             % js2cc(russianSquad.getBPV())
print "\tgetBrokenMorale(): %s"    % js2cc(russianSquad.getBrokenMorale())
print "\tgetELR(): %s"             % js2cc(russianSquad.getELR())
print "\tgetMorale(): %s"          % js2cc(russianSquad.getMorale())
print "\tgetStatus(): %s"          % js2cc(russianSquad.getStatus())

print "\tgetClassification(): %s"  % js2cc(russianSquad.getClassification())
print "\thasMaxELR(): %d"          % russianSquad.hasMaxELR()

print "\tcanAssaultFire(): %d"     % russianSquad.canAssaultFire()
print "\tgetSPE(): %s"             % js2cc(russianSquad.getSPE())

#print "\nConstant string test: %s" % \
#      js2cc(cvar.Squad_CAN_ASSAULT_FIRE_LABEL)

# Create an instance of a German Squad (that throws some exceptions).

# NULL Nationality

print "\nTesting Exception handling during Squad creation:"
print "\nNull nationality parameter:\n"

#germanSquad = Squad(cc2js(None),
#                    cc2js("5"),
#                    cc2js("Squad"),
#                    cc2js("4"),6,1,7,7,0,10,3,0,
#                    cc2js("1st Line"),0,1)

# Test the Dice class.

print "Testing the execution of the Dice class:\n"

for i in (list(range(12))):
    dice = Dice()

#   print "Access methods test - White: %d" % dice.getWhiteDieValue() + \
#         " Colored: %d"  % dice.getColoredDieValue() + \
#         " Combined: %2d" % dice.getCombinedResult()

    print "%s" % (js2cc(dice.toString()))
