################################################################################
# Driver.py - This file contains the Driver script, which is used to test the  #
#             functionality of the public Java classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.python.org/">Python</A> using <A HREF="swig/swig.html">libraries</A> and files  #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The CNI (Compiled Native Interface) invocation functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java String.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

import sys
sys.path.append("/home/craig/jasl/lib/jasl/python")

from CniWrapper import *
from Counters   import *
from UiData     import *
from Utilities  import *

# Simple function to prepend "Caught: " to the beginning of an exception message
# returned by the tests below. This is done primarily to modify the output to
# match that of the other test programs.

def printException(detail):
    print("\nCaught: %s" % detail)

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#cni_wrapper = CniWrapper_instance()

# A call to the valueOf() method of each of the following enums is necessary in
# order to use the constants associated with the type/object directly.

description    = Descriptions_valueOf(cc2js("LEADER"))
nationality    = Nationalities_valueOf(cc2js("GERMAN"))
unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("ELITE"))

# Create an instance of a German Leader.

germanLeader = Leader(nationality,unitType,9,9,-1)

germanLeader.setPortageLevel(2)

# Display all of the entered values for this instance using the toText() method.

print("\nLeader.toText() output:\n\n%s" % js2cc(germanLeader.toText()))

# Display an abbreviated description of this instance using the toString()
# method.

print("Leader.toString() output:\n\n%s\n" % js2cc(germanLeader.toString()))

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

#print("Leader class access methods and output :\n")

#print("\tdescription() - name: %s\tlabel: %s" % (js2cc(germanLeader.description().name()),js2cc(germanLeader.description().toString())))

#print("\tidentity(): %s"              % js2cc(germanLeader.identity()))
#print("\tnationality() - name: %s\tlabel: %s" % (js2cc(germanLeader.nationality().name()),js2cc(germanLeader.nationality().toString())))
#print("\tunitType(): %s"              % js2cc(germanLeader.unitType()))

#print("\tmovement(): %d"              % germanLeader.movement())
#print("\tportageCapacity(): %d"       % germanLeader.portageCapacity())
#print("\tportageLevel(): %d"          % germanLeader.portageLevel())

#print("\tbasicPointValue(): %d"       % germanLeader.basicPointValue())
#print("\tbrokenMorale(): %d"          % germanLeader.brokenMorale())
#print("\tcanSelfRally(): %d"          % germanLeader.canSelfRally())
#print("\tfirepowerEquivalent(): %d"   % germanLeader.firepowerEquivalent())
#print("\tinfantryType() - name: %s\tlabel: %s" % (js2cc(germanLeader.infantryType().name()),js2cc(germanLeader.infantryType().toString())))
#print("\tmorale(): %d"                % germanLeader.morale())
#print("\tnormalRange(): %d"           % germanLeader.normalRange())
#print("\tportageValue(): %d"          % germanLeader.portageValue())

#print("\tmodifier(): %d"              % germanLeader.modifier())

# Test the exception handling within the Serialization class, specifically the
# methods associated with serializing to and deserializing from a file.

print("Testing Exception handling for serialization to and from a file:")

serializationFile = cc2js("")

try:
    Serialization_serializeToFile(None,serializationFile)
except ValueError as detail:
    printException(detail)

try:
    Serialization_serializeToFile(toObject(germanLeader), serializationFile)
except ValueError as detail:
    printException(detail)

try:
    deserializedLeader = Serialization_deserializeFromFile(None)
except ValueError as detail:
    printException(detail)

try:
     deserializedLeader = Serialization_deserializeFromFile(serializationFile)
except ValueError as detail:
    printException(detail)

try:
     deserializedLeader = Serialization_deserializeFromFile(cc2js("/tmp/NonExistentFile"))
except ValueError as detail:
    printException(detail)

# Serialize the Leader object, write the data to a file (Leader.ser), then
# deserialize the data into a new object.

germanLeader.setIdentity(cc2js("Col. Klink"))

serializationFile = cc2js("/tmp/Leader.ser")

try:
    Serialization_serializeToFile(toObject(germanLeader),serializationFile)
except ValueError as detail: # Not expected.
    printException(detail)

try:
    deserializedLeader = unitToLeader(fromObject(Serialization_deserializeFromFile(serializationFile)))
except ValueError as detail: # Not expected.
    printException(detail)

# Display all of the entered values for the deserialized instance using the
# toText() method.

print("\n(Deserialized) Leader.toText() output:\n\n%s" % js2cc(deserializedLeader.toText()))

# Display an abbreviated description of the deserialized instance using the
# toString() method.

print("(Deserialized) Leader.toString() output:\n\n%s\n" % js2cc(deserializedLeader.toString()))

# Display all of the entered values for the deserialized instance using the
# toJSON() method.

print("(Deserialized) Leader.toJSON() output:\n\n%s\n" % js2cc(deserializedLeader.toJSON()))

# Create an instance of a Russian Squad.

nationality    = Nationalities_valueOf(cc2js("RUSSIAN"))
unitType       = InfantryTypes_valueOf(cc2js("GUARDS"))

russianSquad = Squad(nationality,unitType,6,2,8,8,False,12,False,
                     classification,True,True,0)

# Display all of the entered values for this instance using the toText() method.

print("Squad.toText() output:\n\n%s" % js2cc(russianSquad.toText()))

# Display an abbreviated description of this instance using the toString()
# method.

print("Squad.toString() output:\n\n%s\n" % js2cc(russianSquad.toString()))

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

#print("Squad class access methods and output :\n")

#print("\tdescription() - name: %s\tlabel: %s" % (js2cc(russianSquad.description().name()),js2cc(russianSquad.description().toString())))

#print("\tidentity(): %s"               % js2cc(russianSquad.identity()))
#print("\tnationality() - name: %s\tlabel: %s" % (js2cc(russianSquad.nationality().name()),js2cc(russianSquad.nationality().toString())))
#print("\tunitType(): %s"               % js2cc(russianSquad.unitType()))

#print("\tmovement(): %d"               % russianSquad.movement())
#print("\tportageCapacity(): %d"        % russianSquad.portageCapacity())
#print("\tportageLevel(): %d"           % russianSquad.portageLevel())

#print("\tbasicPointValue(): %d"        % russianSquad.basicPointValue())
#print("\tbrokenMorale(): %d"           % russianSquad.brokenMorale())
#print("\tcanSelfRally(): %d"           % russianSquad.canSelfRally())
#print("\tfirepower(): %s"              % js2cc(russianSquad.firepower()))
#print("\tfirepowerEquivalent(): %d"    % russianSquad.firepowerEquivalent())
#print("\tinfantryType() - name: %s\tlabel: %s" % (js2cc(russianSquad.infantryType().name()),js2cc(russianSquad.infantryType().toString())))
#print("\tmorale(): %d"                 % russianSquad.morale())
#print("\tnormalRange(): %d"            % russianSquad.normalRange())
#print("\tportageValue(): %d"           % russianSquad.portageValue())

#print("\tclassification() - name: %s\tlabel: %s" % (js2cc(russianSquad.classification().name()),js2cc(russianSquad.classification().toString())))
#print("\thasMaximumELR(): %d"          % russianSquad.hasMaximumELR())

#print("\tcanAssaultFire(): %d"         % russianSquad.canAssaultFire())
#print("\tcanSprayFire(): %d"           % russianSquad.canSprayFire())
#print("\tsmokePlacementExponent(): %d" % russianSquad.smokePlacementExponent())

# Test the exception handling within the Serialization class, specifically the
# methods associated with serializing to and deserializing from a byte array.

print("Testing Exception handling for serialization to and from a byte array:")

try:
    Serialization_serializeToByteArray(None)
except ValueError as detail:
    printException(detail)

try:
    deserializedSquad = Serialization_deserializeFromByteArray(None)
except ValueError as detail:
    printException(detail)

# Serialize the Squad object, writing the data to a byte array, and then
# deserialize the data into a new object.

russianSquad.setIdentity(cc2js("A"))

try:
    serializedSquad = Serialization_serializeToByteArray(toObject(russianSquad))
except ValueError as detail: # Not expected.
    printException(detail)

try:
    deserializedSquad = unitToSquad(fromObject(Serialization_deserializeFromByteArray(serializedSquad)))
except ValueError as detail: # Not expected.
    printException(detail)

# Display all of the entered values for the deserialized instance using the
# toText() method.

print("\n(Deserialized) Squad.toText() output:\n\n%s" % js2cc(deserializedSquad.toText()))

# Display an abbreviated description of the deserialized instance using the
# toString() method.

print("(Deserialized) Squad.toString() output:\n\n%s\n" % js2cc(deserializedSquad.toString()))

# Display all of the entered values for the deserialized instance using the
# toJSON() method.

print("(Deserialized) Squad.toJSON() output:\n\n%s\n" % js2cc(deserializedSquad.toJSON()))

# Test the fromJSON() method.

print("Testing the fromJSON() method:")

deserializedSquadJSON  = js2cc(deserializedSquad.toJSON())
deserializedLeaderJSON = js2cc(deserializedLeader.toJSON())

validDescription    = "\"Description\":\"SQUAD\"";
validNationality    = "\"Nationality\":\"RUSSIAN\"";
validUnitType       = "\"Unit Type\":\"Guards\"";
validIdentity       = "\"Identity\":\"A\"";
validMovement       = "\"Movement\":4";
validPortageCap     = "\"Portage Capacity\":3";
validPortageLevel   = "\"Portage Level\":0";
validFirepower      = "\"Firepower\":\"6\"";
validFpEquivalent   = "\"Firepower Equivalent\":6";
validNormalRange    = "\"Normal Range\":2";
validMorale         = "\"Morale\":8";
validBrokenMorale   = "\"Broken Morale\":8";
validCanSelfRally   = "\"Can Self Rally ?\":false";
validPortageValue   = "\"Portage Value\":10";
validBPV            = "\"Basic Point Value\":12";
validInfantryType   = "\"Infantry Type\":\"GUARDS\"";
validHasMaxELR      = "\"Has Maximum ELR ?\":false";
validClassification = "\"Classification\":\"ELITE\"";
validCanAssaultFire = "\"Can Assault Fire ?\":true";
validCanSprayFire   = "\"Can Spray Fire ?\":true";
validSPE            = "\"Smoke Placement Exponent\":0";

fromJsonSquadTestStrings = [
 # Unit

  ["Null JSON input data",None],
  ["Empty JSON input data",""],

  ["Updating a Squad with Leader data",deserializedLeaderJSON],
  ["Updating a Squad with an invalid (wrong case) description",
   deserializedSquadJSON.replace(validDescription,
                                 validDescription.replace("\"SQUAD\"","\"Squad\""))],
  ["Updating a Squad with an invalid (non-string) description",
   deserializedSquadJSON.replace(validDescription,
                                 validDescription.replace("\"SQUAD\"","null"))],
 # Fighting

  ["Updating a Squad with a different nationality",
   deserializedSquadJSON.replace(validNationality,
                                 validNationality.replace("\"RUSSIAN\"",
                                                          "\"GERMAN\""))],
  ["Updating a Squad with an invalid (wrong case) nationality",
   deserializedSquadJSON.replace(validNationality,
                                 validNationality.replace("\"RUSSIAN\"",
                                                          "\"Russian\""))],
  ["Updating a Squad with an invalid (non-string) nationality",
   deserializedSquadJSON.replace(validNationality,
                                 validNationality.replace("\"RUSSIAN\"","null"))],

  ["Updating a Squad with a different unit type",
   deserializedSquadJSON.replace(validUnitType,
                                 validUnitType.replace("\"Guards\"",
                                                       "\"Gurkha\""))],
  ["Updating a Squad with an invalid (non-string) unit type",
   deserializedSquadJSON.replace(validUnitType,
                                 validUnitType.replace("\"Guards\"","null"))],

  ["Updating a Squad with an invalid (non-string) identity",
   deserializedSquadJSON.replace(validIdentity,
                                 validIdentity.replace("\"A\"","null"))],
 # Mobile

  ["Updating a Squad with a different movement value",
   deserializedSquadJSON.replace(validMovement,validMovement.replace("4","3"))],
  ["Updating a Squad with an invalid (non-integer) movement value",
   deserializedSquadJSON.replace(validMovement,validMovement.replace("4","null"))],

  ["Updating a Squad with a different portage capacity",
   deserializedSquadJSON.replace(validPortageCap,
                                 validPortageCap.replace("3","5"))],
  ["Updating a Squad with an invalid (non-integer) portage capacity",
   deserializedSquadJSON.replace(validPortageCap,
                                 validPortageCap.replace("3","null"))],

  ["Updating a Squad with an invalid (negative) portage level",
   deserializedSquadJSON.replace(validPortageLevel,
                                 validPortageLevel.replace("0","-1"))],
  ["Updating a Squad with an invalid (non-integer) portage level",
   deserializedSquadJSON.replace(validPortageLevel,
                                 validPortageLevel.replace("0","null"))],
 # Infantry

  ["Updating a Squad with a different firepower value",
   deserializedSquadJSON.replace(validFirepower,
                                 validFirepower.replace("\"6\"","\"4\""))],
  ["Updating a Squad with an invalid (non-string) firepower value",
   deserializedSquadJSON.replace(validFirepower,
                                 validFirepower.replace("\"6\"","null"))],

  ["Updating a Squad with a different firepower equivalent value",
   deserializedSquadJSON.replace(validFpEquivalent,
                                 validFpEquivalent.replace("6","4"))],
  ["Updating a Squad with an invalid (non-integer) firepower equivalent value",
   deserializedSquadJSON.replace(validFpEquivalent,
                                 validFpEquivalent.replace("6","null"))],

  ["Updating a Squad with a different normal range value",
   deserializedSquadJSON.replace(validNormalRange,
                                 validNormalRange.replace("2","4"))],
  ["Updating a Squad with an invalid (non-integer) normal range value",
   deserializedSquadJSON.replace(validNormalRange,
                                 validNormalRange.replace("2","null"))],

  ["Updating a Squad with a different morale value",
   deserializedSquadJSON.replace(validMorale,validMorale.replace("8","7"))],
  ["Updating a Squad with an invalid (non-integer) morale value",
   deserializedSquadJSON.replace(validMorale,validMorale.replace("8","null"))],

  ["Updating a Squad with a different broken morale value",
   deserializedSquadJSON.replace(validBrokenMorale,
                                 validBrokenMorale.replace("8","7"))],
  ["Updating a Squad with an invalid (non-integer) broken morale value",
   deserializedSquadJSON.replace(validBrokenMorale,
                                 validBrokenMorale.replace("8","null"))],

  ["Updating a Squad with a different can self rally setting",
   deserializedSquadJSON.replace(validCanSelfRally,
                                 validCanSelfRally.replace("false","true"))],
  ["Updating a Squad with an invalid (non-boolean) can self rally setting",
   deserializedSquadJSON.replace(validCanSelfRally,
                                 validCanSelfRally.replace("false","null"))],

  ["Updating a Squad with a different portage value",
   deserializedSquadJSON.replace(validPortageValue,
                                 validPortageValue.replace("10","9"))],
  ["Updating a Squad with an invalid (non-integer) portage value",
   deserializedSquadJSON.replace(validPortageValue,
                                 validPortageValue.replace("10","null"))],

  ["Updating a Squad with a different basic point value",
   deserializedSquadJSON.replace(validBPV,validBPV.replace("12","52"))],
  ["Updating a Squad with an invalid (non-integer) basic point value",
   deserializedSquadJSON.replace(validBPV,validBPV.replace("12","null"))],

  ["Updating a Squad with a different infantry type",
   deserializedSquadJSON.replace(validInfantryType,
                                 validInfantryType.replace("\"GUARDS\"",
                                                           "\"NONE\""))],
  ["Updating a Squad with an invalid (wrong case) infantry type",
   deserializedSquadJSON.replace(validInfantryType,
                                 validInfantryType.replace("\"GUARDS\"",
                                                           "\"Guards\""))],
  ["Updating a Squad with an invalid (non-string) infantry type",
   deserializedSquadJSON.replace(validInfantryType,
                                 validInfantryType.replace("\"GUARDS\"",
                                                           "null"))],
 # Personnel

  ["Updating a Squad with a different has maximum ELR setting",
   deserializedSquadJSON.replace(validHasMaxELR,
                                 validHasMaxELR.replace("false","true"))],
  ["Updating a Squad with an invalid (non-boolean) has maximum ELR setting",
   deserializedSquadJSON.replace(validHasMaxELR,
                                 validHasMaxELR.replace("false","null"))],

  ["Updating a Squad with a different classification",
   deserializedSquadJSON.replace(validClassification,
                                 validClassification.replace("\"ELITE\"",
                                                             "\"FIRST_LINE\""))],
  ["Updating a Squad with an invalid (wrong case) classification",
   deserializedSquadJSON.replace(validClassification,
                                 validClassification.replace("\"ELITE\"",
                                                             "\"Elite\""))],
  ["Updating a Squad with an invalid (non-string) classification",
   deserializedSquadJSON.replace(validClassification,
                                 validClassification.replace("\"ELITE\"",
                                                             "null"))],
 # Squad

  ["Updating a Squad with a different can assault fire setting",
   deserializedSquadJSON.replace(validCanAssaultFire,
                                 validCanAssaultFire.replace("true","false"))],
  ["Updating a Squad with an invalid (non-boolean) can assault fire setting",
   deserializedSquadJSON.replace(validCanAssaultFire,
                                 validCanAssaultFire.replace("true","null"))],

  ["Updating a Squad with a different can spray fire setting",
   deserializedSquadJSON.replace(validCanSprayFire,
                                 validCanSprayFire.replace("true","false"))],
  ["Updating a Squad with an invalid (non-boolean) can spray fire setting",
   deserializedSquadJSON.replace(validCanSprayFire,
                                 validCanSprayFire.replace("true","null"))],

  ["Updating a Squad with a different smoke placement exponent value",
   deserializedSquadJSON.replace(validSPE,validSPE.replace("0","3"))],
  ["Updating a Squad with an invalid (non-integer) smoke placement exponent value",
   deserializedSquadJSON.replace(validSPE,validSPE.replace("0","null"))]
]

for row in range(len(fromJsonSquadTestStrings)):
#   print("label: %s JSON: %s\n" % (fromJsonSquadTestStrings[row][0],fromJsonSquadTestStrings[row][1]))

    print("\n%s:" % fromJsonSquadTestStrings[row][0])

    try:
        deserializedSquad.fromJSON(cc2js(fromJsonSquadTestStrings[row][1]))
    except ValueError as detail:
        printException(detail)

# Leader

validModifier = "\"Modifier\":-1";

fromJsonLeaderTestStrings = [
 ["Updating a Leader with a different modifier value",
  deserializedLeaderJSON.replace(validModifier,
                                 validModifier.replace("-1","-2"))],
 ["Updating a Leader with an invalid (non-integer) modifier value",
  deserializedLeaderJSON.replace(validModifier,
                                 validModifier.replace("-1","null"))]
]

for row in range(len(fromJsonLeaderTestStrings)):
#   print("label: %s JSON: %s\n" % (fromJsonLeaderTestStrings[row][0],fromJsonLeaderTestStrings[row][1]))

    print("\n%s:" % fromJsonLeaderTestStrings[row][0])

    try:
        deserializedLeader.fromJSON(cc2js(fromJsonLeaderTestStrings[row][1]))
    except ValueError as detail:
        printException(detail)

# Verify that all of the values for the Squad instance that can be changed using
# the fromJSON() method (Identity and Portage Level) work as expected.

deserializedSquadJSON = deserializedSquadJSON.replace(validIdentity,
                                                      validIdentity.replace("\"A\"",
                                                                            "\"B\""))
deserializedSquadJSON = deserializedSquadJSON.replace(validPortageLevel,
                                                      validPortageLevel.replace("0","2"))

deserializedSquad.fromJSON(cc2js(deserializedSquadJSON))

print("\n(Updated with fromJSON()) Squad.toJSON() output:\n\n%s\n" % js2cc(deserializedSquad.toJSON()))

# Create an array of Unit objects. These will be used to reference a Leader
# instance and several Squad instances. These class types are derived from Unit.

print("Building Unit array with a Leader & 3 Squads\n")

unitList = []

nationality    = Nationalities_valueOf(cc2js("RUSSIAN"))
unitType       = InfantryTypes_valueOf(cc2js("COMMISSAR"))

unitList.append(Leader(nationality,unitType,9,9,0))

unitList[0].setIdentity(cc2js("Commissar Ryzhiy"))

unitType       = InfantryTypes_valueOf(cc2js("GUARDS"))
classification = Classifications_valueOf(cc2js("ELITE"))

unitList.append(Squad(nationality,unitType,6,2,8,8,False,12,False,
                      classification,True,True,0))

unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("FIRST_LINE"))

unitList.append(Squad(nationality,unitType,4,4,7,7,False,7,False,
                      classification,False,False,0))

classification = Classifications_valueOf(cc2js("CONSCRIPT"))

unitList.append(Squad(nationality,unitType,4,2,6,5,False,4,False,
                      classification,False,False,0))

unitList[1].setIdentity(cc2js("X"))
unitList[2].setIdentity(cc2js("Y"))
unitList[3].setIdentity(cc2js("Z"))

print("Displaying Unit array with a Leader & 3 Squads")

for unitIndex in iter(range(4)):
    unit = unitList[unitIndex]

    print("\nUnitList[%d]:\t%s" % (unitIndex,js2cc(unit.toString())))

    print("\n%s" % js2cc(unit.description().toString()))
    print("%s"   % js2cc(unit.identity()))
    print("%s"   % js2cc(unit.unitType()))
    print("%d"   % unit.movement())

# Create an instance of a German Squad (that throws some exceptions).

print("\nTesting Exception handling for Squad update methods:")

nationality = Nationalities_valueOf(cc2js("GERMAN"))
unitType    = InfantryTypes_valueOf(cc2js("NONE"))

squad = Squad(nationality,unitType,4,6,7,7,False,10,False,classification,True,
              False,0)

# Null Identity (no error, just clears the existing one).

squad.setIdentity(None)

# Blank Identity (no error, just clears the existing one).

squad.setIdentity(cc2js(""))

# Invalid portage level

print("\nInvalid portage level argument:")

try:
    squad.setPortageLevel(-1)
except ValueError as detail:
    printException(detail)

print("\nTesting Exception handling during Squad creation:")

nationality = Nationalities_valueOf(cc2js("BRITISH"))
unitType    = InfantryTypes_valueOf(cc2js("ENGINEERS"))

# Incompatible nationality and unitType

print("\nIncompatible nationality and unitType arguments:")

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("RUSSIAN"))
unitType       = InfantryTypes_valueOf(cc2js("COMMISSAR"))
classification = Classifications_valueOf(cc2js("GREEN"))

# Incompatible description and unitType

print("\nIncompatible description and unitType arguments:")

try:
    squad = Squad(nationality,unitType,4,4,7,7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("GERMAN"))
unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("FIRST_LINE"))

# Invalid Firepower

print("\nInvalid (less than 0) firepower argument:")

try:
    squad = Squad(nationality,unitType,-1,6,7,7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

print("\nInvalid (greater than maximum) firepower argument:")

try:
    squad = Squad(nationality,unitType,11,6,7,7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Range

print("\nInvalid (less than 0) normal range argument:")

try:
    squad = Squad(nationality,unitType,4,-255,7,7,False,10,False,
                  classification,True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Morale (Minimum)

print("\nInvalid (less than 0) morale argument:")

try:
    squad = Squad(nationality,unitType,4,6,-1,7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Morale (Maximum)

print("\nInvalid (greater than maximum) morale argument:")

try:
    squad = Squad(nationality,unitType,4,6,11,7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Broken Morale (Minimum)

print("\nInvalid (less than 0) broken morale argument:")

try:
    squad = Squad(nationality,unitType,4,6,7,-7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Broken Morale (Maximum)

print("\nInvalid (greater than maximum) broken morale argument:")

try:
    squad = Squad(nationality,unitType,4,6,7,17,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Basic Point Value (BPV)

print("\nInvalid (less than zero) Basic Point Value (BPV):")

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,-1,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("ITALIAN"))
classification = Classifications_valueOf(cc2js("SS"))

# Incompatible Classification (only German units can be SS)

print("\nIncompatible classification argument (nationality mismatch):")

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("PARTISAN"))
classification = Classifications_valueOf(cc2js("ELITE"))

# Incompatible Classification (Partisan units must have empty classification)

print("\nIncompatible classification argument (invalid setting):")

try:
    squad = Squad(nationality,unitType,3,3,7,6,False,10,False,classification,
                  False,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("GERMAN"))
classification = Classifications_valueOf(cc2js("SECOND_LINE"))

# Invalid Smoke Placement Exponent (Minimum)

print("\nInvalid (less than zero) Smoke Placement Exponent:")

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,6,False,classification,
                  True,False,-4)
except ValueError as detail:
    printException(detail)

# Invalid Smoke Placement Exponent (Maximum)

print("\nInvalid (greater than maximum) Smoke Placement Exponent:")

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,False,classification,
                  True,False,4)
except ValueError as detail:
    printException(detail)

# Create an instance of a Canadian Leader (that throws an exception).
# NOTE: It is only necessary to test the modifier, since all the other
#       exceptions have been tested above as part of the creation of a Squad.

print("\nTesting Exception handling during Leader creation:")

nationality = Nationalities_valueOf(cc2js("BRITISH"))
unitType    = InfantryTypes_valueOf(cc2js("CANADIAN"))

# Invalid Modifier (Minimum)

print("\nInvalid (less than minimum) modifier argument:")

try:
    leader = Leader(nationality,unitType,10,10,-4)
except ValueError as detail:
    printException(detail)

# Invalid Modifier (Maximum)

print("\nInvalid (greater than maximum) modifier argument:")

try:
    leader = Leader(nationality,unitType,10,10,4)
except ValueError as detail:
    printException(detail)

# Test the Dice class.

#print("\nTesting the execution of the Dice class:\n")

#for i in (list(range(12))):
#    dice = Dice()

##   print("Access methods test - White: %d" % dice.whiteDieValue() + \)
##         " Colored: %d"  % dice.coloredDieValue() + \
##         " Combined: %2d" % dice.combinedResult()

#    print("%s" % (js2cc(dice.toText())))

# Test the Game class.

print("\nTesting the operations of the Game class:")

allies           = Sides_valueOf(cc2js("ALLIES"))
nationality      = Nationalities_valueOf(cc2js("AMERICAN"))
alliedPlayerName = cc2js("Pixie")

game = Game_game()

game.addPlayer(allies,alliedPlayerName,nationality,1)

axis           = Sides_valueOf(cc2js("AXIS"))
nationality    = Nationalities_valueOf(cc2js("GERMAN"))
axisPlayerName = cc2js("Buddy")

game.addPlayer(axis,axisPlayerName,nationality,1)

alliedPlayer = game.player(allies,alliedPlayerName)

leader = cc2js("9-1 Leader")
squad  = cc2js("7-4-7 Squad")

alliedPlayer.addUnit(leader)
alliedPlayer.addUnit(squad)
alliedPlayer.addUnit(squad)
alliedPlayer.addUnit(squad)

axisPlayer = game.player(axis,axisPlayerName)

leader = cc2js("8-1 Leader")
squad  = cc2js("6-5-8 Squad")

axisPlayer.addUnit(leader)
axisPlayer.addUnit(squad)
axisPlayer.addUnit(squad)
axisPlayer.addUnit(squad)

print("\n%s" % js2cc(game.toText()))
