################################################################################
# Driver.py - This file contains the Driver script, which is used to test the  #
#             functionality of the public <A HREF="http://java.sun.com/">Java</A> classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.python.org/">Python</A> using <A HREF="swig/swig.html">libraries</A> and files  #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The <A HREF="http://gcc.gnu.org/onlinedocs/gcj/About-CNI.html#About-CNI">CNI</A> (Compiled Native Interface) <A HREF="http://gcc.gnu.org/onlinedocs/gcj/Invocation.html#Invocation">invocation</A> functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java <A HREF="http://java.sun.com/javase/7/docs/api/java/lang/String.html">String</A>.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

import sys
sys.path.append("/home/campbell/jasl/lib/jasl/python")

from CniWrapper import *
from Counters   import *
from UiData     import *
from Utilities  import *

# Simple function to prepend "Caught: " to the beginning of an exception message
# returned by the tests below. This is done primarily to modify the output to
# match that of the other test programs.

def printException(detail):
    print "\nCaught: %s" % detail

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#cni_wrapper = CniWrapper_instance()

# A call to the valueOf() method of each of the following enums is necessary in
# order to use the constants associated with the type/object directly.

description    = Descriptions_valueOf(cc2js("LEADER"))
nationality    = Nationalities_valueOf(cc2js("GERMAN"))
unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("ELITE"))
brokenState    = States_valueOf(cc2js("BROKEN"))
desperateState = States_valueOf(cc2js("DESPERATE"))

# Create an instance of a German Leader.

germanLeader = Leader(nationality,unitType,9,9,4,-1)

germanLeader.setStatus(brokenState)
germanLeader.setPortageLevel(2)

# (Silently) verify that the status that was just set is not (successfully) set
# again (i.e. it worked the first time).

assert(False == germanLeader.setStatus(brokenState))

# Display all of the entered values for this instance using the toText() method.

print "\nLeader.toText() output:\n\n%s" % js2cc(germanLeader.toText())

# Display an abbreviated description of this instance using the toString()
# method.

print "Leader.toString() output:\n\n%s\n" % js2cc(germanLeader.toString())

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

#print "Leader class access methods and output :\n"

#print "\tdescription() - name: %s\tlabel: %s" % (js2cc(germanLeader.description().name()),js2cc(germanLeader.description().toString()))

#print "\tidentity(): %s"              % js2cc(germanLeader.identity())
#print "\tnationality() - name: %s\tlabel: %s" % (js2cc(germanLeader.nationality().name()),js2cc(germanLeader.nationality().toString()))
#statusList = germanLeader.status()
#print "\tstatus() - name: %s\tlabel: %s" % (js2cc(statusList[0].name()),js2cc(statusList[0].toString()))
#print "\tunitType(): %s"              % js2cc(germanLeader.unitType())

#print "\tmovement(): %d"              % germanLeader.movement()
#print "\tportageCapacity(): %d"       % germanLeader.portageCapacity()
#print "\tportageLevel(): %d"          % germanLeader.portageLevel()

#print "\tbasicPointValue(): %d"       % germanLeader.basicPointValue()
#print "\tbrokenMorale(): %d"          % germanLeader.brokenMorale()
#print "\tcanSelfRally(): %d"          % germanLeader.canSelfRally()
#print "\texperienceLevelRating(): %d" % germanLeader.experienceLevelRating()
#print "\tfirepower(): %s"             % js2cc(germanLeader.firepower())
#print "\tfirepowerEquivalent(): %d"   % germanLeader.firepowerEquivalent()
#print "\tinfantryType() - name: %s\tlabel: %s" % (js2cc(germanLeader.infantryType().name()),js2cc(germanLeader.infantryType().toString()))
#print "\tmorale(): %d"                % germanLeader.morale()
#print "\tnormalRange(): %d"           % germanLeader.normalRange()
#print "\tportageValue(): %d"          % germanLeader.portageValue()

#print "\tmodifier(): %d"              % germanLeader.modifier()

# Test the exception handling within the Serialization class, specifically the
# methods associated with serializing to and deserializing from a file.

print "Testing Exception handling for serialization to and from a file:"

serializationFile = cc2js("")

try:
    Serialization_serializeToFile(None,serializationFile)
except ValueError as detail:
    printException(detail)

try:
    Serialization_serializeToFile(toObject(germanLeader), serializationFile)
except ValueError as detail:
    printException(detail)

try:
    deserializedLeader = Serialization_deserializeFromFile(None)
except ValueError as detail:
    printException(detail)

try:
     deserializedLeader = Serialization_deserializeFromFile(serializationFile)
except ValueError as detail:
    printException(detail)

try:
     deserializedLeader = Serialization_deserializeFromFile(cc2js("/tmp/NonExistentFile"))
except ValueError as detail:
    printException(detail)

# Serialize the Leader object, write the data to a file (Leader.ser), then
# deserialize the data into a new object.

germanLeader.setIdentity(cc2js("Col. Klink"))

serializationFile = cc2js("/tmp/Leader.ser")

try:
    Serialization_serializeToFile(toObject(germanLeader),serializationFile)
except ValueError as detail: # Not expected.
    printException(detail)

try:
    deserializedLeader = unitToLeader(fromObject(Serialization_deserializeFromFile(serializationFile)))
except ValueError as detail: # Not expected.
    printException(detail)

# Retrieve the leader's status and then use the value to restore to "normal".

statusList = deserializedLeader.status()

deserializedLeader.clearStatus(statusList[0])

# Display all of the entered values for the deserialized instance using the
# toText() method.

print "\n(Deserialized) Leader.toText() output:\n\n%s" % js2cc(deserializedLeader.toText())

# Display an abbreviated description of the deserialized instance using the
# toString() method.

print "(Deserialized) Leader.toString() output:\n\n%s\n" % js2cc(deserializedLeader.toString())

# Display all of the entered values for the deserialized instance using the
# toJSON() method.

print "(Deserialized) Leader.toJSON() output:\n\n%s\n" % js2cc(deserializedLeader.toJSON())

# Create an instance of a Russian Squad.

nationality    = Nationalities_valueOf(cc2js("RUSSIAN"))
unitType       = InfantryTypes_valueOf(cc2js("GUARDS"))

russianSquad = Squad(nationality,unitType,6,2,8,8,False,12,4,False,
                     classification,True,True,0)

russianSquad.setStatus(desperateState)

# Display all of the entered values for this instance using the toText() method.

print "Squad.toText() output:\n\n%s" % js2cc(russianSquad.toText())

# Display an abbreviated description of this instance using the toString()
# method.

print "Squad.toString() output:\n\n%s\n" % js2cc(russianSquad.toString())

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

#print "Squad class access methods and output :\n"

#print "\tdescription() - name: %s\tlabel: %s" % (js2cc(russianSquad.description().name()),js2cc(russianSquad.description().toString()))

#print "\tidentity(): %s"               % js2cc(russianSquad.identity())
#print "\tnationality() - name: %s\tlabel: %s" % (js2cc(russianSquad.nationality().name()),js2cc(russianSquad.nationality().toString()))
#statusList = russianSquad.status()
#print "\tstatus() - name: %s\tlabel: %s" % (js2cc(statusList[0].name()),js2cc(statusList[0].toString()))
#print "\tunitType(): %s"               % js2cc(russianSquad.unitType())

#print "\tmovement(): %d"               % russianSquad.movement()
#print "\tportageCapacity(): %d"        % russianSquad.portageCapacity()
#print "\tportageLevel(): %d"           % russianSquad.portageLevel()

#print "\tbasicPointValue(): %d"        % russianSquad.basicPointValue()
#print "\tbrokenMorale(): %d"           % russianSquad.brokenMorale()
#print "\tcanSelfRally(): %d"           % russianSquad.canSelfRally()
#print "\texperienceLevelRating(): %d"  % russianSquad.experienceLevelRating()
#print "\tfirepower(): %s"              % js2cc(russianSquad.firepower())
#print "\tfirepowerEquivalent(): %d"    % russianSquad.firepowerEquivalent()
#print "\tinfantryType() - name: %s\tlabel: %s" % (js2cc(russianSquad.infantryType().name()),js2cc(russianSquad.infantryType().toString()))
#print "\tmorale(): %d"                 % russianSquad.morale()
#print "\tnormalRange(): %d"            % russianSquad.normalRange()
#print "\tportageValue(): %d"           % russianSquad.portageValue()

#print "\tclassification() - name: %s\tlabel: %s" % (js2cc(russianSquad.classification().name()),js2cc(russianSquad.classification().toString()))
#print "\thasMaximumELR(): %d"          % russianSquad.hasMaximumELR()

#print "\tcanAssaultFire(): %d"         % russianSquad.canAssaultFire()
#print "\tcanSprayFire(): %d"           % russianSquad.canSprayFire()
#print "\tsmokePlacementExponent(): %d" % russianSquad.smokePlacementExponent()

# Test the exception handling within the Serialization class, specifically the
# methods associated with serializing to and deserializing from a byte array.

print "Testing Exception handling for serialization to and from a byte array:"

try:
    Serialization_serializeToByteArray(None)
except ValueError as detail:
    printException(detail)

try:
    deserializedSquad = Serialization_deserializeFromByteArray(None)
except ValueError as detail:
    printException(detail)

# Serialize the Squad object, writing the data to a byte array, and then
# deserialize the data into a new object.

russianSquad.setIdentity(cc2js("A"))

try:
    serializedSquad = Serialization_serializeToByteArray(toObject(russianSquad))
except ValueError as detail: # Not expected.
    printException(detail)

try:
    deserializedSquad = unitToSquad(fromObject(Serialization_deserializeFromByteArray(serializedSquad)))
except ValueError as detail: # Not expected.
    printException(detail)

# (Silently) verify that if a Unit is subject to desperation morale, it's broken
# status can't be (underhandedly) removed.

assert(False == deserializedSquad.clearStatus(brokenState))

# Retrieve the squad's status and then use the value to "reduce" it to "broken".

statusList = deserializedSquad.status()

deserializedSquad.clearStatus(statusList[0])

# (Silently) verify that the status that was just cleared is not (successfully)
# cleared again (i.e. it worked the first time).

assert(False == deserializedSquad.clearStatus(statusList[0]))

# Display all of the entered values for the deserialized instance using the
# toText() method.

print "\n(Deserialized) Squad.toText() output:\n\n%s" % js2cc(deserializedSquad.toText())

# Display an abbreviated description of the deserialized instance using the
# toString() method.

print "(Deserialized) Squad.toString() output:\n\n%s\n" % js2cc(deserializedSquad.toString())

# Display all of the entered values for the deserialized instance using the
# toJSON() method.

print "(Deserialized) Squad.toJSON() output:\n\n%s\n" % js2cc(deserializedSquad.toJSON())

# Create an array of Unit objects. These will be used to reference a Leader
# instance and several Squad instances. These class types are derived from Unit.

print "Building Unit array with a Leader & 3 Squads\n"

unitList = []

nationality    = Nationalities_valueOf(cc2js("AMERICAN"))
unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("FIRST_LINE"))

unitList.append(Leader(nationality,unitType,9,9,4,-1))

unitList[0].setIdentity(cc2js("Sgt. Slaughter"))

unitList.append(Squad(nationality,unitType,6,6,6,6,False,11,4,False,
                      classification,True,True,0))
unitList.append(Squad(nationality,unitType,6,6,6,6,False,11,4,False,
                      classification,True,True,0))
unitList.append(Squad(nationality,unitType,6,6,6,6,False,11,4,False,
                      classification,True,True,0))

unitList[1].setIdentity(cc2js("X"))
unitList[1].setStatus(brokenState)
unitList[2].setIdentity(cc2js("Y"))
unitList[2].setStatus(desperateState)
unitList[3].setIdentity(cc2js("Z"))

print "Displaying Unit array with a Leader & 3 Squads"

for unitIndex in xrange(4):
    unit = unitList[unitIndex]

    statusList   = unit.status()
    statusString = ""

    # Note that this would not be a good solution if the list was expected to
    # contain more than one entry, but it works here for testing purposes.

    for status in statusList:
        statusString = js2cc(status.toString())

    print "\nUnitList[%d]:\t%s" % (unitIndex,js2cc(unit.toString()))

    print "\n%s" % js2cc(unit.description().toString())
    print "%s"   % js2cc(unit.identity())
    print "%s"   % js2cc(unit.unitType())
    print "%d"   % unit.movement()
    print "[%s]" % statusString

# Create an instance of a German Squad (that throws some exceptions).

print "\nTesting Exception handling for Squad update methods:"

nationality = Nationalities_valueOf(cc2js("GERMAN"))
unitType    = InfantryTypes_valueOf(cc2js("NONE"))

squad = Squad(nationality,unitType,4,6,7,7,False,10,3,False,classification,True,
              False,0)

# Null Identity (no error, just clears the existing one).

squad.setIdentity(None)

# Blank Identity (no error, just clears the existing one).

squad.setIdentity(cc2js(""))

# Invalid portage level

print "\nInvalid portage level parameter:"

try:
    squad.setPortageLevel(-1)
except ValueError as detail:
    printException(detail)

print "\nTesting Exception handling during Squad creation:"

nationality = Nationalities_valueOf(cc2js("BRITISH"))
unitType    = InfantryTypes_valueOf(cc2js("ENGINEERS"))

# Incompatible nationality and unitType

print "\nIncompatible nationality and unitType parameters:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("RUSSIAN"))
unitType       = InfantryTypes_valueOf(cc2js("COMMISSAR"))
classification = Classifications_valueOf(cc2js("GREEN"))

# Incompatible description and unitType

print "\nIncompatible description and unitType parameters:"

try:
    squad = Squad(nationality,unitType,4,4,7,7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("GERMAN"))
unitType       = InfantryTypes_valueOf(cc2js("NONE"))
classification = Classifications_valueOf(cc2js("FIRST_LINE"))

# Invalid Firepower

print "\nInvalid (less than 0) firepower parameter:"

try:
    squad = Squad(nationality,unitType,-1,6,7,7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

print "\nInvalid (greater than maximum) firepower parameter:"

try:
    squad = Squad(nationality,unitType,11,6,7,7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Range

print "\nInvalid (less than 0) normal range parameter:"

try:
    squad = Squad(nationality,unitType,4,-255,7,7,False,10,3,False,
                  classification,True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Morale (Minimum)

print "\nInvalid (less than 0) morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,-1,7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Morale (Maximum)

print "\nInvalid (greater than maximum) morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,11,7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Broken Morale (Minimum)

print "\nInvalid (less than 0) broken morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,7,-7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Broken Morale (Maximum)

print "\nInvalid (greater than maximum) broken morale parameter:"

try:
    squad = Squad(nationality,unitType,4,6,7,17,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Basic Point Value (BPV)

print "\nInvalid (less than zero) Basic Point Value (BPV):"

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,-1,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Experience Level Rating (Minimum)

print "\nInvalid (less than zero) Experience Level Rating (ELR):"

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,-1,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

# Invalid Experience Level Rating (Maximum)

print "\nInvalid (greater than maximum) Experience Level Rating (ELR):"

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,6,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("ITALIAN"))
classification = Classifications_valueOf(cc2js("SS"))

# Incompatible Classification

print "\nIncompatible classification parameter:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,3,False,classification,
                  True,False,0)
except ValueError as detail:
    printException(detail)

nationality    = Nationalities_valueOf(cc2js("GERMAN"))
classification = Classifications_valueOf(cc2js("SECOND_LINE"))

# Invalid Smoke Placement Exponent (Minimum)

print "\nInvalid (less than zero) Smoke Placement Exponent:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,3,False,classification,
                  True,False,-4)
except ValueError as detail:
    printException(detail)

# Invalid Smoke Placement Exponent (Maximum)

print "\nInvalid (greater than maximum) Smoke Placement Exponent:"

try:
    squad = Squad(nationality,unitType,4,6,7,7,False,10,3,False,classification,
                  True,False,4)
except ValueError as detail:
    printException(detail)

# Create an instance of a Canadian Leader (that throws an exception).
# NOTE: It is only necessary to test the modifier, since all the other
#       exceptions have been tested above as part of the creation of a Squad.

print "\nTesting Exception handling during Leader creation:"

nationality = Nationalities_valueOf(cc2js("BRITISH"))
unitType    = InfantryTypes_valueOf(cc2js("CANADIAN"))

# Invalid Modifier (Minimum)

print "\nInvalid (less than minimum) modifier parameter:"

try:
    leader = Leader(nationality,unitType,10,10,5,-4)
except ValueError as detail:
    printException(detail)

# Invalid Modifier (Maximum)

print "\nInvalid (greater than maximum) modifier parameter:"

try:
    leader = Leader(nationality,unitType,10,10,5,4)
except ValueError as detail:
    printException(detail)

# Test the Dice class.

print "\nTesting the execution of the Dice class:\n"

for i in (list(range(12))):
    dice = Dice()

#   print "Access methods test - White: %d" % dice.whiteDieValue() + \
#         " Colored: %d"  % dice.coloredDieValue() + \
#         " Combined: %2d" % dice.combinedResult()

    print "%s" % (js2cc(dice.toText()))

# Test the Scenario class.

print "Testing Exception handling during Scenario creation:\n"

# Invalid filename (tests the constructor that accepts a String).

print "Invalid filename:"

try:
    scenario = Scenario(cc2js("scenarios/The Guard Counterattack.json"))
except ValueError as detail:
    printException(detail)

# Valid resource path / filename and data.

print "\nTesting the operations of the Scenario class:\n"

scenario = Scenario(cc2js("../scenarios/The Guards Counterattack.json"))

# Display all of the attributes of the scenario using the toText() method.

print "Scenario.toText() output:\n"
print "%s" % (js2cc(scenario.toText()))

# Display an abbreviated description of the scenario (its name) using the
# toString() method.

print "Scenario.toString() output:\n"
print "%s\n" % (js2cc(scenario.toString()))

# Test the Game class.

print "Testing the operations of the Game class:"

allies           = Sides_valueOf(cc2js("ALLIES"))
nationality      = Nationalities_valueOf(cc2js("AMERICAN"))
alliedPlayerName = cc2js("Pixie")

game = Game_game()

game.addPlayer(allies,alliedPlayerName,nationality,1)

axis           = Sides_valueOf(cc2js("AXIS"))
nationality    = Nationalities_valueOf(cc2js("GERMAN"))
axisPlayerName = cc2js("Buddy")

game.addPlayer(axis,axisPlayerName,nationality,1)

alliedPlayer = game.player(allies,alliedPlayerName)

leader = cc2js("9-1 Leader")
squad  = cc2js("7-4-7 Squad")

alliedPlayer.addUnit(leader)
alliedPlayer.addUnit(squad)
alliedPlayer.addUnit(squad)
alliedPlayer.addUnit(squad)

axisPlayer = game.player(axis,axisPlayerName)

leader = cc2js("8-1 Leader")
squad  = cc2js("6-5-8 Squad")

axisPlayer.addUnit(leader)
axisPlayer.addUnit(squad)
axisPlayer.addUnit(squad)
axisPlayer.addUnit(squad)

print "\n%s" % js2cc(game.toText())
