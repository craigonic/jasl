#!/usr/bin/perl
################################################################################
# Driver.pl - This file contains the Driver script, which is used to test the  #
#             functionality of the public <A HREF="http://java.sun.com/">Java</A> classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.perl.org/">Perl</A> using <A HREF="swig/swig.html">libraries</A> and files    #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The <A HREF="http://gcc.gnu.org/onlinedocs/gcj/About-CNI.html#About-CNI">CNI</A> (Compiled Native Interface) <A HREF="http://gcc.gnu.org/onlinedocs/gcj/Invocation.html#Invocation">invocation</A> functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java <A HREF="http://java.sun.com/javase/7/docs/api/java/lang/String.html">String</A>.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

#$PERLLIB_INC = "/home/campbell/java/jasl/lib";
#unshift(@INC,$PERLLIB_INC);

#use diagnostics;
#use diagnostics -verbose;

use CniWrapper;
use Counters;
use Utilities;

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#my $cni_wrapper = CniWrapper::CniWrapper::instance();

# Create an instance of a German Leader.

$germanLeader = new Counters::Leader(CniWrapper::cc2js("German"),
                                     CniWrapper::cc2js("Lt. Fellbaum"),
                                     CniWrapper::cc2js("Leader"),
                                     9,9,4,-1);

# Display all of the entered values for this instance using the toString()
# method.

printf("Leader.toString() output:\n\n%s\n",
       CniWrapper::js2cc($germanLeader->toString()));

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

printf("Leader class access methods and output :\n");

printf("\n\tgetDescription(): %s\n",
       CniWrapper::js2cc($germanLeader->getDescription()));

printf("\tcanSprayFire(): %d\n",$germanLeader->canSprayFire());
printf("\tgetFirepower(): %s\n",
       CniWrapper::js2cc($germanLeader->getFirepower()));
printf("\tgetIdentity(): %s\n",
       CniWrapper::js2cc($germanLeader->getIdentity()));
printf("\tgetNationality(): %s\n",
       CniWrapper::js2cc($germanLeader->getNationality()));
printf("\tgetNormalRange(): %s\n",
       CniWrapper::js2cc($germanLeader->getNormalRange()));
printf("\tgetPortageValue(): %s\n",
       CniWrapper::js2cc($germanLeader->getPortageValue()));
printf("\tgetUnitType(): %s\n",
       CniWrapper::js2cc($germanLeader->getUnitType()));

printf("\tgetMovement(): %s\n",
       CniWrapper::js2cc($germanLeader->getMovement()));
printf("\tgetPortageCapacity(): %s\n",
       CniWrapper::js2cc($germanLeader->getPortageCapacity()));
printf("\tgetPortageLevel(): %s\n",
       CniWrapper::js2cc($germanLeader->getPortageLevel()));

printf("\tcanSelfRally(): %d\n",$germanLeader->canSelfRally());
printf("\tgetBPV(): %s\n",
       CniWrapper::js2cc($germanLeader->getBPV()));
printf("\tgetBrokenMorale(): %s\n",
       CniWrapper::js2cc($germanLeader->getBrokenMorale()));
printf("\tgetELR(): %s\n",
       CniWrapper::js2cc($germanLeader->getELR()));
printf("\tgetMorale(): %s\n",
       CniWrapper::js2cc($germanLeader->getMorale()));
printf("\tgetStatus(): %s\n",
       CniWrapper::js2cc($germanLeader->getStatus()));

printf("\tgetModifier(): %s\n",
       CniWrapper::js2cc($germanLeader->getModifier()));

#printf("\nConstant string test: %s\n",
#       CniWrapper::js2cc($Counters::Leader::MODIFIER_LABEL));

# Create an instance of a Russian Squad.

$russianSquad = new Counters::Squad(CniWrapper::cc2js("Russian"),
                                    CniWrapper::cc2js("A"),
                                    CniWrapper::cc2js("Guards"),
                                    CniWrapper::cc2js("6"),2,1,8,
                                    8,0,12,4,0,
                                    CniWrapper::cc2js("Elite"),
                                    1,0);

# Display all of the entered values for this instance using the toString()
# method.

printf("\nSquad.toString() output:\n\n%s\n",
       CniWrapper::js2cc($russianSquad->toString()));

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

printf("Squad class access methods and output :\n");

printf("\n\tgetDescription(): %s\n",
       CniWrapper::js2cc($russianSquad->getDescription()));

printf("\tcanSprayFire(): %d\n",$russianSquad->canSprayFire());
printf("\tgetFirepower(): %s\n",
       CniWrapper::js2cc($russianSquad->getFirepower()));
printf("\tgetIdentity(): %s\n",
       CniWrapper::js2cc($russianSquad->getIdentity()));
printf("\tgetNationality(): %s\n",
       CniWrapper::js2cc($russianSquad->getNationality()));
printf("\tgetNormalRange(): %s\n",
       CniWrapper::js2cc($russianSquad->getNormalRange()));
printf("\tgetPortageValue(): %s\n",
       CniWrapper::js2cc($russianSquad->getPortageValue()));
printf("\tgetUnitType(): %s\n",
       CniWrapper::js2cc($russianSquad->getUnitType()));

printf("\tgetMovement(): %s\n",
       CniWrapper::js2cc($russianSquad->getMovement()));
printf("\tgetPortageCapacity(): %s\n",
       CniWrapper::js2cc($russianSquad->getPortageCapacity()));
printf("\tgetPortageLevel(): %s\n",
       CniWrapper::js2cc($russianSquad->getPortageLevel()));

printf("\tcanSelfRally(): %d\n",$russianSquad->canSelfRally());
printf("\tgetBPV(): %s\n",
       CniWrapper::js2cc($russianSquad->getBPV()));
printf("\tgetBrokenMorale(): %s\n",
       CniWrapper::js2cc($russianSquad->getBrokenMorale()));
printf("\tgetELR(): %s\n",
       CniWrapper::js2cc($russianSquad->getELR()));
printf("\tgetMorale(): %s\n",
       CniWrapper::js2cc($russianSquad->getMorale()));
printf("\tgetStatus(): %s\n",
       CniWrapper::js2cc($russianSquad->getStatus()));

printf("\tgetClassification(): %s\n",
       CniWrapper::js2cc($russianSquad->getClassification()));
printf("\thasMaxELR(): %d\n",$russianSquad->hasMaxELR());

printf("\tcanAssaultFire(): %d\n",$russianSquad->canAssaultFire());
printf("\tgetSPE(): %s\n",
       CniWrapper::js2cc($russianSquad->getSPE()));

#printf("\nConstant string test: %s\n",
#       CniWrapper::js2cc($Counters::Squad::CAN_ASSAULT_FIRE_LABEL));

# Create an instance of a German Squad (that throws some exceptions).

# NULL Nationality

printf("\nTesting Exception handling during Squad creation:\n");
printf("\nNull nationality parameter:\n");

#$germanSquad = new Counters::Squad(CniWrapper::cc2js(undef),
#                                   CniWrapper::cc2js("5"),
#                                   CniWrapper::cc2js("Squad"),
#                                   CniWrapper::cc2js("4"),6,1,7,7,
#                                   0,10,3,0,
#                                   CniWrapper::cc2js("1st Line"),
#                                   0,1);

#printf("Squad.toString() output:\n\n%s\n",
#       CniWrapper::js2cc($germanSquad->toString()));

# Test the Dice class.

printf("\nTesting the execution of the Dice class:\n\n");

for ($i = 0;$i < 12;$i++)
{
    $theDice = new Utilities::Dice();

#   printf("Access methods test - White: %d Colored: %d Combined: %2d\n",
#          $theDice->getWhiteDieValue(),
#          $theDice->getColoredDieValue(),
#          $theDice->getCombinedResult());

    printf("%s\n",CniWrapper::js2cc($theDice->toString()));
}
