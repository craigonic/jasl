#!/usr/bin/perl
################################################################################
# Driver.pl - This file contains the Driver script, which is used to test the  #
#             functionality of the public <A HREF="http://java.sun.com/">Java</A> classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.perl.org/">Perl</A> using <A HREF="swig/swig.html">libraries</A> and files    #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The <A HREF="http://gcc.gnu.org/onlinedocs/gcj/About-CNI.html#About-CNI">CNI</A> (Compiled Native Interface) <A HREF="http://gcc.gnu.org/onlinedocs/gcj/Invocation.html#Invocation">invocation</A> functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java <A HREF="http://java.sun.com/javase/7/docs/api/java/lang/String.html">String</A>.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

#$PERLLIB_INC = "/home/campbell/java/jasl/lib";
#unshift(@INC,$PERLLIB_INC);

#use diagnostics;
#use diagnostics -verbose;

use CniWrapper;
use Counters;
use Utilities;

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#my $cni_wrapper = CniWrapper::CniWrapper::instance();

# A call to the valueOf() method of each of the following enums is necessary in
# order to use the constants associated with the type/object directly.

$nationality = Counters::Nationalities::valueOf(CniWrapper::cc2js("AMERICAN"));
$unitType = Counters::InfantryTypes::valueOf(CniWrapper::cc2js("NONE"));
$classification = Counters::Classifications::valueOf(CniWrapper::cc2js("GREEN"));
$state = Counters::States::valueOf(CniWrapper::cc2js("NORMAL"));

# Create an instance of a German Leader.

$germanLeader = new Counters::Leader($Counters::Nationalities_GERMAN,
                                     $Counters::InfantryTypes_NONE,
                                     9,9,4,-1);

$germanLeader->setIdentity(CniWrapper::cc2js("Lt. Fellbaum"));

# Display all of the entered values for this instance using the toString()
# method.

printf("Leader.toString() output:\n\n%s\n",
       CniWrapper::js2cc($germanLeader->toString()));

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

printf("Leader class access methods and output :\n");

printf("\n\tdescription(): %s\n",
       CniWrapper::js2cc($germanLeader->description()));

printf("\tidentity(): %s\n",
       CniWrapper::js2cc($germanLeader->identity()));
printf("\tnationality(): %s\n",
       CniWrapper::js2cc($germanLeader->nationality()));
printf("\tstatus(): %s\n",
       CniWrapper::js2cc($germanLeader->status()));
printf("\tunitType(): %s\n",
       CniWrapper::js2cc($germanLeader->unitType()));

printf("\tmovement(): %d\n",$germanLeader->movement());
printf("\tportageCapacity(): %d\n",$germanLeader->portageCapacity());
printf("\tportageLevel(): %d\n",$germanLeader->portageLevel());

printf("\tbasicPointValue(): %d\n",$germanLeader->basicPointValue());
printf("\tbrokenMorale(): %d\n",$germanLeader->brokenMorale());
printf("\tcanSelfRally(): %d\n",$germanLeader->canSelfRally());
printf("\texperienceLevelRating(): %d\n",
       $germanLeader->experienceLevelRating());
printf("\tfirepower(): %s\n",
       CniWrapper::js2cc($germanLeader->firepower()));
printf("\tfirepowerEquivalent(): %d\n",$germanLeader->firepowerEquivalent());
printf("\tmorale(): %d\n",$germanLeader->morale());
printf("\tnormalRange(): %d\n",$germanLeader->normalRange());
printf("\tportageValue(): %d\n",$germanLeader->portageValue());

printf("\tmodifier(): %d\n",$germanLeader->modifier());

# Create an instance of a Russian Squad.

$russianSquad = new Counters::Squad($Counters::Nationalities::RUSSIAN,
                                    $Counters::InfantryTypes::GUARDS,
                                    6,2,8,8,0,12,4,0,
                                    $Counters::Classifications::ELITE,1,1,0);

$russianSquad->setIdentity(CniWrapper::cc2js("A"));

# Display all of the entered values for this instance using the toString()
# method.

printf("\nSquad.toString() output:\n\n%s\n",
       CniWrapper::js2cc($russianSquad->toString()));

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

printf("Squad class access methods and output :\n");

printf("\n\tdescription(): %s\n",
       CniWrapper::js2cc($russianSquad->description()));

printf("\tidentity(): %s\n",
       CniWrapper::js2cc($russianSquad->identity()));
printf("\tnationality(): %s\n",
       CniWrapper::js2cc($russianSquad->nationality()));
printf("\tstatus(): %s\n",
       CniWrapper::js2cc($russianSquad->status()));
printf("\tunitType(): %s\n",
       CniWrapper::js2cc($russianSquad->unitType()));

printf("\tmovement(): %d\n",$russianSquad->movement());
printf("\tportageCapacity(): %d\n",$russianSquad->portageCapacity());
printf("\tportageLevel(): %d\n",$russianSquad->portageLevel());

printf("\tbasicPointValue(): %d\n",$russianSquad->basicPointValue());
printf("\tbrokenMorale(): %d\n",$russianSquad->brokenMorale());
printf("\tcanSelfRally(): %d\n",$russianSquad->canSelfRally());
printf("\texperienceLevelRating(): %d\n",
       $russianSquad->experienceLevelRating());
printf("\tfirepower(): %s\n",
       CniWrapper::js2cc($russianSquad->firepower()));
printf("\tfirepowerEquivalent(): %d\n",$russianSquad->firepowerEquivalent());
printf("\tmorale(): %d\n",$russianSquad->morale());
printf("\tnormalRange(): %d\n",$russianSquad->normalRange());
printf("\tportageValue(): %d\n",$russianSquad->portageValue());

printf("\tclassification(): %s\n",
       CniWrapper::js2cc($russianSquad->classification()));
printf("\thasMaximumELR(): %d\n",$russianSquad->hasMaximumELR());
printf("\tcanAssaultFire(): %d\n",$russianSquad->canAssaultFire());
printf("\tcanSprayFire(): %d\n",$russianSquad->canSprayFire());
printf("\tsmokePlacementExponent(): %d\n",
       $russianSquad->smokePlacementExponent());

# Create an instance of a German Squad (that throws some exceptions).

# NULL Nationality

printf("\nTesting Exception handling during Squad creation:\n");
printf("\nNull nationality parameter:\n");

#$germanSquad = new Counters::Squad(CniWrapper::cc2js(undef),
#                                   CniWrapper::cc2js("5"),
#                                   CniWrapper::cc2js("Squad"),
#                                   CniWrapper::cc2js("4"),6,1,7,7,
#                                   0,10,3,0,
#                                   CniWrapper::cc2js("1st Line"),
#                                   0,1);

#printf("Squad.toString() output:\n\n%s\n",
#       CniWrapper::js2cc($germanSquad->toString()));

# Test the Dice class.

printf("\nTesting the execution of the Dice class:\n\n");

for ($i = 0;$i < 12;$i++)
{
    $theDice = new Utilities::Dice();

#   printf("Access methods test - White: %d Colored: %d Combined: %2d\n",
#          $theDice->whiteDieValue(),
#          $theDice->coloredDieValue(),
#          $theDice->combinedResult());

    printf("%s\n",CniWrapper::js2cc($theDice->toString()));
}
