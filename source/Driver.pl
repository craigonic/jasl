#!/usr/bin/perl
################################################################################
# Driver.pl - This file contains the Driver script, which is used to test the  #
#             functionality of the public <A HREF="http://www.oracle.com/technetwork/java/index.html">Java</A> classes defined in the <A HREF="jasl/jasl.html">jasl</A>     #
#             package hierarchy, accessed by <A HREF="http://www.perl.org/">Perl</A> using <A HREF="swig/swig.html">libraries</A> and files    #
#             generated by <A HREF="http://www.swig.org/">SWIG</A>.                                               #
#                                                                              #
#             The <A HREF="http://gcc.gnu.org/onlinedocs/gcc-6.3.0/gcj/About-CNI.html#About-CNI">CNI</A> (Compiled Native Interface) <A HREF="http://gcc.gnu.org/onlinedocs/gcc-6.3.0/gcj/Invocation.html#Invocation">invocation</A> functions, which  #
#             are required to use the Java classes, are initiated in this      #
#             script by the <A HREF="swig/CniWrapper.swig.html">CniWrapper</A> module. This module also provides       #
#             methods to convert a native string to or from a Java <A HREF="http://docs.oracle.com/javase/8/docs/api/java/lang/String.html">String</A>.     #
#                                                                              #
# Written By: Craig R. Campbell  -  August 2008                                #
################################################################################

#$PERLLIB_INC = "/home/campbell/java/jasl/lib";
#unshift(@INC,$PERLLIB_INC);

#use diagnostics;
#use diagnostics -verbose;

use CniWrapper;
use Counters;
use UiData;
use Utilities;

# The following call is necessary only if either the js2cc() or cc2js() function
# is NOT called (invoking either one will start the CniWrapper).

#my $cni_wrapper = CniWrapper::CniWrapper::instance();

# A call to the valueOf() method of each of the following enums is necessary in
# order to use the constants associated with the type/object directly.

$nationality = Counters::Nationalities::valueOf(CniWrapper::cc2js("AMERICAN"));
$unitType = Counters::InfantryTypes::valueOf(CniWrapper::cc2js("NONE"));
$classification = Counters::Classifications::valueOf(CniWrapper::cc2js("GREEN"));
$state = Counters::States::valueOf(CniWrapper::cc2js("NORMAL"));

# Create an instance of a German Leader.

$germanLeader = new Counters::Leader($Counters::Nationalities_GERMAN,
                                     $Counters::InfantryTypes_NONE,
                                     9,9,4,-1);

# Display all of the entered values for this instance using the toText() method.

printf("\nLeader.toText() output:\n\n%s\n",
       CniWrapper::js2cc($germanLeader->toText()));

# Display an abbreviated description of this instance using the toString()
# method.

printf("Leader.toString() output:\n\n%s\n\n",
       CniWrapper::js2cc($germanLeader->toString()));

# Display the output of all of the access methods declared for the Leader class
# using the instance created above.

#printf("Leader class access methods and output :\n");

#printf("\n\tdescription(): %s\n",
#       CniWrapper::js2cc($germanLeader->description()));

#printf("\tidentity(): %s\n",
#       CniWrapper::js2cc($germanLeader->identity()));
#printf("\tnationality(): %s\n",
#       CniWrapper::js2cc($germanLeader->nationality()));
#printf("\tstatus(): %s\n",
#       CniWrapper::js2cc($germanLeader->status()));
#printf("\tunitType(): %s\n",
#       CniWrapper::js2cc($germanLeader->unitType()));

#printf("\tmovement(): %d\n",$germanLeader->movement());
#printf("\tportageCapacity(): %d\n",$germanLeader->portageCapacity());
#printf("\tportageLevel(): %d\n",$germanLeader->portageLevel());

#printf("\tbasicPointValue(): %d\n",$germanLeader->basicPointValue());
#printf("\tbrokenMorale(): %d\n",$germanLeader->brokenMorale());
#printf("\tcanSelfRally(): %d\n",$germanLeader->canSelfRally());
#printf("\texperienceLevelRating(): %d\n",
#       $germanLeader->experienceLevelRating());
#printf("\tfirepower(): %s\n",
#       CniWrapper::js2cc($germanLeader->firepower()));
#printf("\tfirepowerEquivalent(): %d\n",$germanLeader->firepowerEquivalent());
#printf("\tmorale(): %d\n",$germanLeader->morale());
#printf("\tnormalRange(): %d\n",$germanLeader->normalRange());
#printf("\tportageValue(): %d\n",$germanLeader->portageValue());

#printf("\tmodifier(): %d\n\n",$germanLeader->modifier());

# Serialize the Leader object, write the data to a file (Leader.ser), then
# deserialize the data into a new object.

$germanLeader->setIdentity(CniWrapper::cc2js("Col. Klink"));

$serializationFile = CniWrapper::cc2js("/tmp/Leader.ser");

Utilities::Serialization::serializeToFile(Counters::toObject($germanLeader),
                                          $serializationFile);

$unit =
    Counters::fromObject(Utilities::Serialization::deserializeFromFile($serializationFile));

# Display all of the entered values for the deserialized instance using the
# toText() method.

printf("(Deserialized) Leader.toText() output:\n\n%s\n",
       CniWrapper::js2cc($unit->toText()));

# Display an abbreviated description of the deserialized instance using the
# toString() method.

printf("(Deserialized) Leader.toString() output:\n\n%s\n\n",
       CniWrapper::js2cc($unit->toString()));

# Display all of the entered values for the deserialized instance using the
# toJSON() method.

printf("(Deserialized) Leader.toJSON() output:\n\n%s\n\n",
       CniWrapper::js2cc($unit->toJSON()));

# Create an instance of a Russian Squad.

$russianSquad = new Counters::Squad($Counters::Nationalities::RUSSIAN,
                                    $Counters::InfantryTypes::GUARDS,
                                    6,2,8,8,0,12,4,0,
                                    $Counters::Classifications::ELITE,1,1,0);

$russianSquad->setIdentity(CniWrapper::cc2js("A"));

# Display all of the entered values for this instance using the toText() method.

printf("Squad.toText() output:\n\n%s\n",
       CniWrapper::js2cc($russianSquad->toText()));

# Display an abbreviated description of this instance using the toString()
# method.

printf("Squad.toString() output:\n\n%s\n\n",
       CniWrapper::js2cc($russianSquad->toString()));

# Display all of the entered values for this instance using the toJSON() method.

printf("Squad.toJSON() output:\n\n%s\n\n",
       CniWrapper::js2cc($russianSquad->toJSON()));

# Display the output of all of the access methods declared for the Squad class
# using the instance created above.

#printf("Squad class access methods and output :\n");

#printf("\n\tdescription(): %s\n",
#       CniWrapper::js2cc($russianSquad->description()));

#printf("\tidentity(): %s\n",
#       CniWrapper::js2cc($russianSquad->identity()));
#printf("\tnationality(): %s\n",
#       CniWrapper::js2cc($russianSquad->nationality()));
#printf("\tstatus(): %s\n",
#       CniWrapper::js2cc($russianSquad->status()));
#printf("\tunitType(): %s\n",
#       CniWrapper::js2cc($russianSquad->unitType()));

#printf("\tmovement(): %d\n",$russianSquad->movement());
#printf("\tportageCapacity(): %d\n",$russianSquad->portageCapacity());
#printf("\tportageLevel(): %d\n",$russianSquad->portageLevel());

#printf("\tbasicPointValue(): %d\n",$russianSquad->basicPointValue());
#printf("\tbrokenMorale(): %d\n",$russianSquad->brokenMorale());
#printf("\tcanSelfRally(): %d\n",$russianSquad->canSelfRally());
#printf("\texperienceLevelRating(): %d\n",
#       $russianSquad->experienceLevelRating());
#printf("\tfirepower(): %s\n",
#       CniWrapper::js2cc($russianSquad->firepower()));
#printf("\tfirepowerEquivalent(): %d\n",$russianSquad->firepowerEquivalent());
#printf("\tmorale(): %d\n",$russianSquad->morale());
#printf("\tnormalRange(): %d\n",$russianSquad->normalRange());
#printf("\tportageValue(): %d\n",$russianSquad->portageValue());

#printf("\tclassification(): %s\n",
#       CniWrapper::js2cc($russianSquad->classification()));
#printf("\thasMaximumELR(): %d\n",$russianSquad->hasMaximumELR());
#printf("\tcanAssaultFire(): %d\n",$russianSquad->canAssaultFire());
#printf("\tcanSprayFire(): %d\n",$russianSquad->canSprayFire());
#printf("\tsmokePlacementExponent(): %d\n",
#       $russianSquad->smokePlacementExponent());

# Create an array of Unit objects. These will be used to reference a Leader
# instance and several Squad instances. These class types are derived from Unit.

printf("Building Unit array with a Leader & 3 Squads\n");

@unitList = ();

$nationality    = $Counters::Nationalities::AMERICAN;
$unitType       = $Counters::InfantryTypes::NONE;
$classification = $Counters::Classifications::FIRST_LINE;

push @unitList,new Counters::Leader($nationality,$unitType,9,9,4,-1);

$unitList[0]->setIdentity(CniWrapper::cc2js("Sgt. Slaughter"));

push @unitList,new Counters::Squad($nationality,$unitType,
                                   6,6,6,6,0,11,4,0,$classification,1,1,0);
push @unitList,new Counters::Squad($nationality,$unitType,
                                   6,6,6,6,0,11,4,0,$classification,1,1,0);
push @unitList,new Counters::Squad($nationality,$unitType,
                                   6,6,6,6,0,11,4,0,$classification,1,1,0);

$unitList[1]->setIdentity(CniWrapper::cc2js("X"));
$unitList[2]->setIdentity(CniWrapper::cc2js("Y"));
$unitList[3]->setIdentity(CniWrapper::cc2js("Z"));

printf("\nDisplaying Unit array with a Leader & 3 Squads\n");

$unitIndex = 0;

foreach $unit (@unitList)
{
    printf("\nUnitList[%d]:\t%s\n",
           $unitIndex++,CniWrapper::js2cc($unit->toString()));

    printf("\n%s\n%s\n%s\n%s\n%s\n",
           CniWrapper::js2cc($unit->description()),
           CniWrapper::js2cc($unit->identity()),
           CniWrapper::js2cc($unit->unitType()),
           $unit->movement(),
           CniWrapper::js2cc($unit->status()));
}

# Create an instance of a German Squad (that throws some exceptions).

printf("\nTesting Exception handling during Squad creation:\n");

$nationality    = $Counters::Nationalities::BRITISH;
$unitType       = $Counters::InfantryTypes::ENGINEERS;
$classification = $Counters::Classifications::FIRST_LINE;

# Incompatible nationality and unitType

printf("\nIncompatible nationality and unitType parameters:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

$nationality    = $Counters::Nationalities::RUSSIAN;
$unitType       = $Counters::InfantryTypes::COMMISSAR;
$classification = $Counters::Classifications::GREEN;

# Incompatible description and unitType

printf("\nIncompatible description and unitType parameters:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,4,7,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

$nationality    = $Counters::Nationalities::GERMAN;
$unitType       = $Counters::InfantryTypes::NONE;
$classification = $Counters::Classifications::FIRST_LINE;

# Invalid Firepower

printf("\nInvalid (less than 0) firepower parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,-1,6,7,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

printf("\nInvalid (greater than maximum) firepower parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,11,6,7,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Range

printf("\nInvalid (less than 0) normal range parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,-255,7,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Morale (Minimum)

printf("\nInvalid (less than 0) morale parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,-1,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Morale (Maximum)

printf("\nInvalid (greater than maximum) morale parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,11,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Broken Morale (Minimum)

printf("\nInvalid (less than 0) broken morale parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,-7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Broken Morale (Maximum)

printf("\nInvalid (greater than maximum) broken morale parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,17,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Basic Point Value (BPV)

printf("\nInvalid (less than zero) Basic Point Value (BPV):\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,7,0,-1,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Experience Level Rating (Minimum)

printf("\nInvalid (less than zero) Experience Level Rating (ELR):\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,7,0,10,-1,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

# Invalid Experience Level Rating (Maximum)

printf("\nInvalid (greater than maximum) Experience Level Rating (ELR):\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,7,0,10,6,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

$nationality    = $Counters::Nationalities::ITALIAN;
$classification = $Counters::Classifications::SS;

# Incompatible Classification

printf("\nIncompatible classification parameter:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,7,0,10,3,0,
                                 $classification,1,0,0);
};

printException($@) if (!defined($status));

$nationality    = $Counters::Nationalities::GERMAN;
$classification = $Counters::Classifications::SECOND_LINE;

# Invalid Smoke Placement Exponent (Minimum)

printf("\nInvalid (less than zero) Smoke Placement Exponent:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,7,0,10,3,0,
                                 $classification,1,0,-4);
};

printException($@) if (!defined($status));

# Invalid Smoke Placement Exponent (Maximum)

printf("\nInvalid (greater than maximum) Smoke Placement Exponent:\n");

$status = eval
{
    $squad = new Counters::Squad($nationality,$unitType,4,6,7,7,0,10,3,0,
                                 $classification,1,0,4);
};

printException($@) if (!defined($status));

# Create an instance of a Canadian Leader (that throws an exception).
# NOTE: It is only necessary to test the modifier, since all the other
#       exceptions have been tested above as part of the creation of a Squad.

printf("\nTesting Exception handling during Leader creation:\n");

$nationality    = $Counters::Nationalities::BRITISH;
$unitType       = $Counters::InfantryTypes::CANADIAN;

# Invalid Modifier (Minimum)

printf("\nInvalid (less than minimum) modifier parameter:\n");

$status = eval
{
    $leader = new Counters::Leader($nationality,$unitType,10,10,5,-4);
};

printException($@) if (!defined($status));

# Invalid Modifier (Maximum)

printf("\nInvalid (greater than maximum) modifier parameter:\n");

$status = eval
{
    $leader = new Counters::Leader($nationality,$unitType,10,10,5,4);
};

printException($@) if (!defined($status));

# Test the Dice class.

printf("\nTesting the execution of the Dice class:\n\n");

for ($i = 0;$i < 12;$i++)
{
    $theDice = new Utilities::Dice();

#   printf("Access methods test - White: %d Colored: %d Combined: %2d\n",
#          $theDice->whiteDieValue(),
#          $theDice->coloredDieValue(),
#          $theDice->combinedResult());

    printf("%s\n",CniWrapper::js2cc($theDice->toText()));
}

# Test the Player and Stack classes.

printf("Testing Exception handling during Player creation:\n");

$nationality = $Counters::Nationalities::PARTISAN;

# Null Name

printf("\nNull name parameter:\n");

$status = eval
{
    $player = new UiData::Player(undef,$nationality,1);
};

printException($@) if (!defined($status));

# Blank Name

printf("\nZero-length name parameter:\n");

$status = eval
{
    $player = new UiData::Player(CniWrapper::cc2js(""),$nationality,1);
};

printException($@) if (!defined($status));

# Invalid Entry Turn (less than 1)

printf("\nInvalid (less than 1) entry turn:\n");

$status = eval
{
    $player = new UiData::Player(CniWrapper::cc2js("Dr. Pepper"),$nationality,-1);
};

printException($@) if (!defined($status));

printf("\nTesting Exception handling for Player methods:\n");

# Null Unit parameter to addUnit()

$player = new UiData::Player(CniWrapper::cc2js("Dr. Pepper"),$nationality,1);

printf("\nNull Unit parameter to addUnit():\n");

$status = eval
{
    $player->addUnit(undef);
};

printException($@) if (!defined($status));

# Null Stack parameter to addStack()

printf("\nNull Stack parameter to addStack():\n");

$status = eval
{
    $player->addStack(undef);
};

printException($@) if (!defined($status));

# Confirm that the Player's Unit list is empty.

my @unitList = @{$player->stackList()};

if (0 != scalar(@unitList))
{
    die "player's stack list is NOT empty!";
}

# Add some valid Units to the Player object.

printf("\nAssign some Units to the Player:\n");

$player->addUnit(CniWrapper::cc2js("7-0 Leader (Dr. Pepper)"));
$player->addUnit(CniWrapper::cc2js("3-3-7 Squad (A)"));
$player->addUnit(CniWrapper::cc2js("3-3-7 Squad (B)"));
$player->addUnit(CniWrapper::cc2js("3-3-7 Squad (C)"));
$player->addUnit(CniWrapper::cc2js("2-6 LMG (X)"));

# Display all of the entered values for this instance using the toText() method.

printf("\nPlayer.toText() output:\n");
printf("\n%s\n",CniWrapper::js2cc($player->toText()));

# Retrieve a list of the Units (in Stacks) assigned to the Player.

@unitList = @{$player->stackList()};

# Invalid index parameter to takeStack()

$temporaryStack = undef;

printf("Invalid (Stack) list index:\n");

$status = eval
{
    $temporaryStack = $player->takeStack(scalar(@unitList));
};

printException($@) if (!defined($status));

# Create Stacks for use in testing invalid argument handling in
# Stack::addPortagedItem() and Stack::addSubStack().

printf("\nTesting Exception handling during Stack creation:\n");

$testUnit      = undef;
$unitTestStack = undef;

# Null Unit

printf("\nNull Unit parameter:\n");

$status = eval
{
    $unitTestStack = new_Stack_U UiData::Stack($testUnit,0,0);
};

printException($@) if (!defined($status));

# Null Stack

printf("\nNull Stack parameter:\n");

$status = eval
{
    $unitTestStack = new_Stack_U UiData::Stack($unitTestStack,0,0);
};

printException($@) if (!defined($status));

$testUnit = CniWrapper::cc2js("6+1 Leader (Sgt. Stedenko)");

$unitTestStack = new_Stack_U UiData::Stack($testUnit,7,77);

$subStackTestStack = new_Stack_S UiData::Stack($unitTestStack);

# Confirm that a Stack managing a Unit doesn't have sub-stacks.

if (undef != $unitTestStack->subStacks())
{
    die "unitTestStack has sub-stacks!";
}

# Confirm that a Stack managing a group of sub-stacks doesn't have
# any portaged items.

if (undef != $subStackTestStack->portagedItems())
{
    die "subStackTestStack has portaged items!";
}

# Invalid Stack

printf("\nInvalid Stack parameter:\n");

$status = eval
{
    $subStackTestStack = new_Stack_S UiData::Stack($subStackTestStack);
};

printException($@) if (!defined($status));

printf("\nTesting Exception handling for Stack methods:\n");

# Null Stack parameter to addPortagedItem()

printf("\nNull Stack parameter to addPortagedItem():\n");

$status = eval
{
    $unitList[2]->addPortagedItem(undef);
};

printException($@) if (!defined($status));

# Invalid Stack parameter to addPortagedItem()

printf("\nInvalid Stack parameter to addPortagedItem():\n");

$status = eval
{
    $unitList[2]->addPortagedItem($subStackTestStack);
};

printException($@) if (!defined($status));

printf("\nTesting the operations of the Player and Stack classes:\n");

# Have the second Squad in the list carry (portage) the machine gun.

printf("\nThe second Squad will carry the machine gun:\n");

$temporaryStack = $player->takeStack($#unitList);

$unitList[2]->addPortagedItem($temporaryStack);

printf("\nPlayer.toText() output:\n");
printf("\n%s\n",CniWrapper::js2cc($player->toText()));

# Pass the machine gun from the second squad to the first.

printf("Now it's the first Squad's turn to carry it:\n");

@unitList = @{$player->stackList()};

%portagedItems = %{$unitList[2]->portagedItems()};

@portagedItemKeys = sort(keys %portagedItems);

$temporaryStack = $unitList[2]->takePortagedItem($portagedItemKeys[0]);

$unitList[1]->addPortagedItem($temporaryStack);

printf("\nPlayer.toText() output:\n");
printf("\n%s\n",CniWrapper::js2cc($player->toText()));

# Null Stack parameter to addSubStack()

printf("Null Stack parameter to Stack.addSubStack():\n");

$status = eval
{
    $unitList[2]->addSubStack(undef);
};

printException($@) if (!defined($status));

# Invalid Stack parameter to addSubStack()

printf("\nInvalid Stack parameter to Stack.addSubStack():\n");

$status = eval
{
    $unitList[2]->addSubStack($subStackTestStack);
};

printException($@) if (!defined($status));

# Group all of the Units into a single Stack.

printf("\nAll of the Units in a single stack:\n");

$newStack = new_Stack_S UiData::Stack($player->takeStack(0));

@unitList = @{$player->stackList()};
$i = 0;
$stackListSize = scalar(@unitList);

while ($i++ < $stackListSize)
{
    $newStack->addSubStack($player->takeStack(0));
}

$player->addStack($newStack);

printf("\nPlayer.toText() output:\n");
printf("\n%s\n",CniWrapper::js2cc($player->toText()));

# Set the position of the (single / combined) Stack.

printf("Set the position of the stack to 1H5:\n");

@unitList = @{$player->stackList()};

$unitList[0]->setPositionLabel(CniWrapper::cc2js("1H5"));

printf("\nPlayer.toText() output:\n");
printf("\n%s\n",CniWrapper::js2cc($player->toText()));

# Move the first Squad in the (single / combined) Stack to a separate position.

printf("Move the first Squad to a different position (1F7):\n");

@unitList = @{$player->stackList()};

$temporaryStack = $unitList[0];

%subStacks = %{$temporaryStack->subStacks()};

@subStackKeys = sort(keys %subStacks);

printf("\nThe individual Stacks within the combined one are:\n\n");

foreach $key (@subStackKeys)
{
    printf("\tKey: %s\t%s\n",
           $key,CniWrapper::js2cc($subStacks{$key}->toText()));
}

$newStack = $temporaryStack->takeSubStack($subStackKeys[1]);

$newStack->setPositionLabel(CniWrapper::cc2js("1F7"));

$player->addStack($newStack);

printf("\nPlayer.toText() output:\n");
printf("\n%s\n",CniWrapper::js2cc($player->toText()));

# Test the Game class.

printf("Testing the operations of the Game class:\n");

$allies           = UiData::Sides::valueOf(CniWrapper::cc2js("ALLIES"));
$nationality      = $Counters::Nationalities::AMERICAN;
$alliedPlayerName = CniWrapper::cc2js("Pixie");

$game = UiData::Game::game();

$game->addPlayer($allies,$alliedPlayerName,$nationality,1);

$axis           = $UiData::Sides::AXIS;
$nationality    = $Counters::Nationalities::GERMAN;
$axisPlayerName = CniWrapper::cc2js("Buddy");

$game->addPlayer($axis,$axisPlayerName,$nationality,1);

$alliedPlayer = $game->player($allies,$alliedPlayerName);

$leader = CniWrapper::cc2js("9-1 Leader");
$squad  = CniWrapper::cc2js("7-4-7 Squad");

$alliedPlayer->addUnit($leader);
$alliedPlayer->addUnit($squad);
$alliedPlayer->addUnit($squad);
$alliedPlayer->addUnit($squad);

$axisPlayer = $game->player($axis,$axisPlayerName);

$leader = CniWrapper::cc2js("8-1 Leader");
$squad  = CniWrapper::cc2js("6-5-8 Squad");
$lmg    = CniWrapper::cc2js("3-8 LMG");

$axisPlayer->addUnit($leader);
$axisPlayer->addUnit($squad);
$axisPlayer->addUnit($squad);
$axisPlayer->addUnit($squad);
$axisPlayer->addUnit($lmg);
$axisPlayer->addUnit($lmg);

printf("\n%s\n",CniWrapper::js2cc($game->toText()));

################################################################################
# printException - a subroutine to do just what its name says. In this case, it
#                  is used to modify an exception message to match the output of
#                  the other test programs.
################################################################################

sub printException
{
    local($inputString) = @_;

    $inputString =~ s/ValueError/Caught:/;
    $inputString =~ s/ at .*\.pm line \d+\.//;
    $inputString =~ s/ at .\/Driver line \d+\.//;

    printf("\n%s",$inputString);
}
