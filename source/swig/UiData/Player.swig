// ************************************************************************** //
// Player.swig - This file is an interface description for <A HREF="http://www.swig.org/">SWIG</A>. It is used   //
//               to generate shared libraries that link to the library        //
//               created for the <A HREF="../../jasl/ui/data/data.html">package</A> containing this class. These         //
//               libraries, along with the other files that are generated,    //
//               allow objects of this type to be accessed from the supported //
//               scripting languages (<A HREF="http://www.perl.org/">Perl</A> and <A HREF="http://www.python.org/">Python</A>).                       //
//                                                                            //
//               NOTE: This file is intended for use in the <A HREF="UiData.swig.html">UiData</A> interface  //
//                     file, not to build standalone libraries.               //
//                                                                            //
// Written By: Craig R. Campbell  -  October 2014                             //
// ************************************************************************** //

%module Player;

// The C++ object generated by the constructor is managed by the <A HREF="http://www.oracle.com/technetwork/java/index.html">Java</A> Virtual
// Machine created by the <A HREF="../CniWrapper/CniWrapper.swig.html">CNI wrapper</A>, so it is freed through garbage
// collection. This typemap overrides the default behavior of the wrapper
// generated by SWIG, which is to explicitly delete the object along with the
// target language wrapper object when it goes out of scope.

%apply SWIGTYPE* DISOWN { Player* };

// Add support for catching Java exceptions thrown by the constructor and the
// mutator methods.

%exception Player    JAVA_EXCEPTION
%exception addUnit   JAVA_EXCEPTION
%exception addStack  JAVA_EXCEPTION
%exception takeStack JAVA_EXCEPTION

// This typemap is used to copy the elements of the List (each a pointer to a
// Stack object) into an array/list that is accessible via the corresponding
// scripting language.

%{
#include <java/util/List.h>
%}

%typemap(out) ::java::util::List*
{
#if defined(SWIGPERL)
    AV*  statusArray = newAV();

    for (int i = 0;i < $1->size();++i)
    {
        SV* svp = sv_newmortal();

        SWIG_MakePtr(svp,$1->get(i),SWIGTYPE_p_Stack,0);

        av_push(statusArray,svp);
    }

    $result = newRV_inc((SV*)statusArray);
    sv_2mortal($result);
    argvi++;
#elif defined(SWIGPYTHON)
    $result = PyList_New($1->size());

    for (int i = 0;i < $1->size();++i)
    {
        PyObject* pyObject = SWIG_NewPointerObj($1->get(i),SWIGTYPE_p_Stack,0);

        PyList_SetItem($result,i,pyObject);
    }
#endif
}

// The public interface of the <A HREF="../../jasl/ui/data/Player.html">Player</A> class.

class Player
{
    public:

        // Constructor.

        Player(::java::lang::String* name,
               ::jasl::counters::Nationality$Nationalities* nationality,
               int entryTurn);

        ::java::lang::String* nationality();
        int                   entryTurn();
        ::java::util::List*   stackList();

        void                  addUnit(::java::lang::String*);
        void                  addStack(::jasl::ui::data::Stack*);
        Stack*                takeStack(int);

        ::java::lang::String* toText();
        ::java::lang::String* toString();    // Name.
};
