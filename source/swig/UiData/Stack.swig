// ************************************************************************** //
// Stack.swig - This file is an interface description for <A HREF="http://www.swig.org/">SWIG</A>. It is used to //
//              generate shared libraries that link to the library created    //
//              for the <A HREF="../../jasl/ui/data/data.html">package</A> containing this class. These libraries, along //
//              with the other files that are generated, allow objects of     //
//              this type to be accessed from the supported scripting         //
//              languages (<A HREF="http://www.perl.org/">Perl</A> and <A HREF="http://www.python.org/">Python</A>).                                  //
//                                                                            //
//              NOTE: This file is intended for use in the <A HREF="UiData.swig.html">UiData</A> interface   //
//                    file, not to build standalone libraries.                //
//                                                                            //
// Written By: Craig R. Campbell  -  February 2017                            //
// ************************************************************************** //

%module Stack;

// The C++ object generated by the constructor is managed by the <A HREF="http://www.oracle.com/technetwork/java/index.html">Java</A> Virtual
// Machine created by the <A HREF="../CniWrapper/CniWrapper.swig.html">CNI wrapper</A>, so it is freed through garbage
// collection. This typemap overrides the default behavior of the wrapper
// generated by SWIG, which is to explicitly delete the object along with the
// target language wrapper object when it goes out of scope.

%apply SWIGTYPE* DISOWN { Stack* };

// Add support for catching Java exceptions thrown by the constructor and the
// mutator methods.

%exception Stack            JAVA_EXCEPTION
%exception addPortagedItem  JAVA_EXCEPTION
%exception takePortagedItem JAVA_EXCEPTION
%exception addSubStack      JAVA_EXCEPTION
%exception takeSubStack     JAVA_EXCEPTION

// These entries are necessary in order for the correct constructor to be
// selected (having a different parameter list apparently is not enough). They
// also (obviously) necessitate a change from the "normal" instantiation of a
// Stack object.

%rename("Stack_U") Stack(::java::lang::String*,int,int);
%rename("Stack_S") Stack(::jasl::ui::data::Stack*);

// The following typemap is used to convert a native (to the scripting language)
// integer value into a Java Integer object, for use as an argument to the
// underlying method.

%{
#include <java/lang/Integer.h>
#include <java/util/Iterator.h>
#include <java/util/Map.h>
#include <java/util/Set.h>
%}

%typemap(in) ::java::lang::Integer*
{
#if defined(SWIGPERL)
    $1 = ::java::lang::Integer::valueOf((int)SvIV($input));
#elif defined(SWIGPYTHON)
    $1 = ::java::lang::Integer::valueOf(PyLong_AsLong($input));
#endif
}

// The following typemap is used to translate the contents of a Java Map object
// into either a Perl hash or a Python dictionary.

%typemap(out) ::java::util::Map*
{
#if defined(SWIGPERL)
    if (NULL == $1) XSRETURN_UNDEF;

    HV* stackMap = newHV();

    ::java::util::Iterator* mapKeyIterator = $1->keySet()->iterator();

    while (mapKeyIterator->hasNext())
    {
        ::java::lang::Integer* key =
            static_cast< ::java::lang::Integer*>(mapKeyIterator->next());

        const char* keyAsAString = js2cc(key->toString());

        SV* svp = sv_newmortal();
        SWIG_MakePtr(svp,$1->get(key),SWIGTYPE_p_Stack,0);

        hv_store(stackMap,keyAsAString,strlen(keyAsAString),svp,0);

        delete [] keyAsAString;
    }

    $result = newRV_noinc((SV*)stackMap);
    argvi++;
#elif defined(SWIGPYTHON)
    if (NULL == $1) Py_RETURN_NONE;

    $result = PyDict_New();

    ::java::util::Iterator* mapKeyIterator = $1->keySet()->iterator();

    while (mapKeyIterator->hasNext())
    {
        ::java::lang::Integer* key =
            static_cast< ::java::lang::Integer*>(mapKeyIterator->next());

        PyObject* pyObject =
            SWIG_NewPointerObj($1->get(key),SWIGTYPE_p_Stack,0);

        PyDict_SetItem($result,PyInt_FromLong(key->intValue()),pyObject);
    }
#endif
}

// The public interface of the <A HREF="../../jasl/ui/data/Stack.html">Stack</A> class.

class Stack
{
    public:

        // Constructors.

        Stack(::java::lang::String* unit,int unitID,int stackID);
        Stack(::jasl::ui::data::Stack* stack);

        int                   unitID();
        int                   stackID();
        ::java::lang::String* positionLabel();
        ::java::lang::String* unit();
        ::java::util::Map*    portagedItems();
        ::java::util::Map*    subStacks();

        void                  setPositionLabel(::java::lang::String*);

        bool                  addPortagedItem(::jasl::ui::data::Stack*);
        Stack*                takePortagedItem(::java::lang::Integer*);

        bool                  addSubStack(::jasl::ui::data::Stack*);
        Stack*                takeSubStack(::java::lang::Integer*);

        ::java::lang::String* toText();
        ::java::lang::String* toString();
};
