// ************************************************************************** //
// States.swig - This file is an interface description for <A HREF="http://www.swig.org/">SWIG</A>. It is used   //
//               to generate shared libraries that link to the library        //
//               created for the <A HREF="../../jasl/counters/counters.html">package</A> containing this enum. These          //
//               libraries, along with the other files that are generated,    //
//               allow objects of this type to be accessed from the supported //
//               scripting languages (<A HREF="http://www.perl.org/">Perl</A> and <A HREF="http://www.python.org/">Python</A>).                       //
//                                                                            //
//               NOTE: This file is intended for use in the <A HREF="Counters.swig.html">Counters</A>          //
//                     interface file, not to build standalone libraries.     //
//                                                                            //
// Written By: Craig R. Campbell  -  February 2014                            //
// ************************************************************************** //

%module States;

// The C++ object generated by the constructor is managed by the <A HREF="http://www.oracle.com/technetwork/java/index.html">Java</A> Virtual
// Machine created by the <A HREF="../CniWrapper/CniWrapper.swig.html">CNI wrapper</A>, so it is freed through garbage
// collection. This typemap overrides the default behavior of the wrapper
// generated by SWIG, which is to explicitly delete the object along with the
// target language wrapper object when it goes out of scope.

%apply SWIGTYPE* DISOWN { States* };

// This NORMAL element of the States enum conflicts with a macro in one of the
// Perl headers.

#ifdef SWIGPERL
%{
#undef NORMAL
%}
#endif

// The public interface of the <A HREF="../../jasl/counters/Status.html">States</A> enum.

class States
{
    public:

        // toString() returns the label associated with an enum value (e.g.
        // "Normal" for NORMAL) and name() returns its text representation (e.g.
        // "NORMAL").

        ::java::lang::String* name();
        ::java::lang::String* toString();
        static        States* valueOf(::java::lang::String*);

    private:

        States(::java::lang::String*,int,::java::lang::String*,int);
};
