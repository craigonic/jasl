// ************************************************************************** //
// Leader.swig - This file is an interface description for <A HREF="http://www.swig.org/">SWIG</A>. It is used   //
//               to generate shared libraries that link to the library        //
//               created for the <A HREF="../jasl/counters/counters.html">package</A> containing this class. These         //
//               libraries, along with the other files that are generated,    //
//               allow objects of this type to be accessed from the supported //
//               scripting languages (<A HREF="http://www.perl.org/">Perl</A> and <A HREF="http://www.python.org/">Python</A>).                       //
//                                                                            //
//               NOTE: This file is intended for use in the <A HREF="Counters.swig.html">Counters</A>          //
//                     interface file, not to build standalone libraries.     //
//                                                                            //
// Written By: Craig R. Campbell  -  November 2009                            //
//                                                                            //
// $Id: Leader.swig,v 1.1 2009/11/19 20:46:14 campbell Exp $
// ************************************************************************** //

%module Leader;

// The C++ object generated by the constructor is managed by the <A HREF="http://java.sun.com/">Java</A> Virtual
// Machine created by the <A HREF="CniWrapper.swig.html">CNI wrapper</A>, so it is freed through garbage
// collection. This typemap overrides the default behavior of the wrapper
// generated by SWIG, which is to explicitly delete the object along with the
// target language wrapper object when it goes out of scope.

%apply SWIGTYPE* DISOWN { Leader* };

// The public interface of the <A HREF="../jasl/counters/Leader.html">Leader</A> class.

class Leader
{
    public:

        // Constructor.

        Leader(::java::lang::String* nationality,::java::lang::String* identity,
               ::java::lang::String* unitType,int morale,int brokenMorale,
               int experienceLevelRating,int modifier);

        // Method declarations. See the indicated class documentation for more
        // details on the operation of each one.

        // <A HREF="../jasl/counters/Unit.html">Unit</A>.

        ::java::lang::String* getDescription();

        // <A HREF="../jasl/counters/Fighting.html">Fighting</A>.

        bool                  canSprayFire();
        ::java::lang::String* getFirepower();
        ::java::lang::String* getIdentity();
        ::java::lang::String* getNationality();
        ::java::lang::String* getNormalRange();
        ::java::lang::String* getPortageValue();
        ::java::lang::String* getUnitType();

        void                  setIdentity(::java::lang::String* newIdentity);
        void                  setStatus(int newStatus);

        // <A HREF="../jasl/counters/Mobile.html">Mobile</A>.

        ::java::lang::String* getMovement();
        ::java::lang::String* getPortageCapacity();
        ::java::lang::String* getPortageLevel();

        // <A HREF="../jasl/counters/Infantry.html">Infantry</A>.

        bool                  canSelfRally();
        ::java::lang::String* getBPV();
        ::java::lang::String* getBrokenMorale();
        ::java::lang::String* getELR();
        ::java::lang::String* getMorale();
        ::java::lang::String* getStatus();

        bool                  check(int modifier);
        bool                  restore(bool isLeaderPresent,int modifier);

        // <A HREF="../jasl/counters/Leader.html">Leader</A>.

        ::java::lang::String* getModifier();
        ::java::lang::String* toString();

        // Constants.

%immutable;

        static ::java::lang::String* MODIFIER_LABEL;
};
